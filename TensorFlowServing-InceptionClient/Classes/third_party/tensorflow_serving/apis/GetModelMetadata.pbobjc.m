// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/get_model_metadata.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Any.pbobjc.h>
#else
 #import "google/protobuf/Any.pbobjc.h"
#endif

 #import "tensorflow_serving/apis/GetModelMetadata.pbobjc.h"
 #import "tensorflow/core/protobuf/MetaGraph.pbobjc.h"
 #import "tensorflow_serving/apis/Model.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - GetModelMetadataRoot

@implementation GetModelMetadataRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - GetModelMetadataRoot_FileDescriptor

static GPBFileDescriptor *GetModelMetadataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow.serving"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SignatureDefMap

@implementation SignatureDefMap

@dynamic signatureDef, signatureDef_Count;

typedef struct SignatureDefMap__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *signatureDef;
} SignatureDefMap__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signatureDef",
        .dataTypeSpecific.className = GPBStringifySymbol(SignatureDef),
        .number = SignatureDefMap_FieldNumber_SignatureDef,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SignatureDefMap__storage_, signatureDef),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SignatureDefMap class]
                                     rootClass:[GetModelMetadataRoot class]
                                          file:GetModelMetadataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SignatureDefMap__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetModelMetadataRequest

@implementation GetModelMetadataRequest

@dynamic hasModelSpec, modelSpec;
@dynamic metadataFieldArray, metadataFieldArray_Count;

typedef struct GetModelMetadataRequest__storage_ {
  uint32_t _has_storage_[1];
  ModelSpec *modelSpec;
  NSMutableArray *metadataFieldArray;
} GetModelMetadataRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelSpec",
        .dataTypeSpecific.className = GPBStringifySymbol(ModelSpec),
        .number = GetModelMetadataRequest_FieldNumber_ModelSpec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetModelMetadataRequest__storage_, modelSpec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadataFieldArray",
        .dataTypeSpecific.className = NULL,
        .number = GetModelMetadataRequest_FieldNumber_MetadataFieldArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetModelMetadataRequest__storage_, metadataFieldArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetModelMetadataRequest class]
                                     rootClass:[GetModelMetadataRoot class]
                                          file:GetModelMetadataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetModelMetadataRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetModelMetadataResponse

@implementation GetModelMetadataResponse

@dynamic hasModelSpec, modelSpec;
@dynamic metadata, metadata_Count;

typedef struct GetModelMetadataResponse__storage_ {
  uint32_t _has_storage_[1];
  ModelSpec *modelSpec;
  NSMutableDictionary *metadata;
} GetModelMetadataResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelSpec",
        .dataTypeSpecific.className = GPBStringifySymbol(ModelSpec),
        .number = GetModelMetadataResponse_FieldNumber_ModelSpec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetModelMetadataResponse__storage_, modelSpec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "metadata",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = GetModelMetadataResponse_FieldNumber_Metadata,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetModelMetadataResponse__storage_, metadata),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetModelMetadataResponse class]
                                     rootClass:[GetModelMetadataRoot class]
                                          file:GetModelMetadataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetModelMetadataResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
