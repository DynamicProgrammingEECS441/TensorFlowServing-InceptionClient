// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/inference.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow_serving/apis/Inference.pbobjc.h"
 #import "tensorflow_serving/apis/Classification.pbobjc.h"
 #import "tensorflow_serving/apis/Input.pbobjc.h"
 #import "tensorflow_serving/apis/Model.pbobjc.h"
 #import "tensorflow_serving/apis/Regression.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - InferenceRoot

@implementation InferenceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - InferenceRoot_FileDescriptor

static GPBFileDescriptor *InferenceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow.serving"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - InferenceTask

@implementation InferenceTask

@dynamic hasModelSpec, modelSpec;
@dynamic methodName;

typedef struct InferenceTask__storage_ {
  uint32_t _has_storage_[1];
  ModelSpec *modelSpec;
  NSString *methodName;
} InferenceTask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelSpec",
        .dataTypeSpecific.className = GPBStringifySymbol(ModelSpec),
        .number = InferenceTask_FieldNumber_ModelSpec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InferenceTask__storage_, modelSpec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "methodName",
        .dataTypeSpecific.className = NULL,
        .number = InferenceTask_FieldNumber_MethodName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InferenceTask__storage_, methodName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InferenceTask class]
                                     rootClass:[InferenceRoot class]
                                          file:InferenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InferenceTask__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InferenceResult

@implementation InferenceResult

@dynamic resultOneOfCase;
@dynamic hasModelSpec, modelSpec;
@dynamic classificationResult;
@dynamic regressionResult;

typedef struct InferenceResult__storage_ {
  uint32_t _has_storage_[2];
  ModelSpec *modelSpec;
  XTDSClassificationResult *classificationResult;
  RegressionResult *regressionResult;
} InferenceResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelSpec",
        .dataTypeSpecific.className = GPBStringifySymbol(ModelSpec),
        .number = InferenceResult_FieldNumber_ModelSpec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InferenceResult__storage_, modelSpec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "classificationResult",
        .dataTypeSpecific.className = GPBStringifySymbol(XTDSClassificationResult),
        .number = InferenceResult_FieldNumber_ClassificationResult,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InferenceResult__storage_, classificationResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "regressionResult",
        .dataTypeSpecific.className = GPBStringifySymbol(RegressionResult),
        .number = InferenceResult_FieldNumber_RegressionResult,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(InferenceResult__storage_, regressionResult),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InferenceResult class]
                                     rootClass:[InferenceRoot class]
                                          file:InferenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InferenceResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "result",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void InferenceResult_ClearResultOneOfCase(InferenceResult *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - MultiInferenceRequest

@implementation MultiInferenceRequest

@dynamic tasksArray, tasksArray_Count;
@dynamic hasInput, input;

typedef struct MultiInferenceRequest__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tasksArray;
  Input *input;
} MultiInferenceRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tasksArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InferenceTask),
        .number = MultiInferenceRequest_FieldNumber_TasksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MultiInferenceRequest__storage_, tasksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "input",
        .dataTypeSpecific.className = GPBStringifySymbol(Input),
        .number = MultiInferenceRequest_FieldNumber_Input,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MultiInferenceRequest__storage_, input),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MultiInferenceRequest class]
                                     rootClass:[InferenceRoot class]
                                          file:InferenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MultiInferenceRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MultiInferenceResponse

@implementation MultiInferenceResponse

@dynamic resultsArray, resultsArray_Count;

typedef struct MultiInferenceResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *resultsArray;
} MultiInferenceResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "resultsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(InferenceResult),
        .number = MultiInferenceResponse_FieldNumber_ResultsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MultiInferenceResponse__storage_, resultsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MultiInferenceResponse class]
                                     rootClass:[InferenceRoot class]
                                          file:InferenceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MultiInferenceResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
