// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/regression.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow_serving/apis/Regression.pbobjc.h"
 #import "tensorflow_serving/apis/Input.pbobjc.h"
 #import "tensorflow_serving/apis/Model.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RegressionRoot

@implementation RegressionRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RegressionRoot_FileDescriptor

static GPBFileDescriptor *RegressionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow.serving"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Regression

@implementation Regression

@dynamic value;

typedef struct Regression__storage_ {
  uint32_t _has_storage_[1];
  float value;
} Regression__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = Regression_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Regression__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Regression class]
                                     rootClass:[RegressionRoot class]
                                          file:RegressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Regression__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegressionResult

@implementation RegressionResult

@dynamic regressionsArray, regressionsArray_Count;

typedef struct RegressionResult__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *regressionsArray;
} RegressionResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "regressionsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Regression),
        .number = RegressionResult_FieldNumber_RegressionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RegressionResult__storage_, regressionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegressionResult class]
                                     rootClass:[RegressionRoot class]
                                          file:RegressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegressionResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegressionRequest

@implementation RegressionRequest

@dynamic hasModelSpec, modelSpec;
@dynamic hasInput, input;

typedef struct RegressionRequest__storage_ {
  uint32_t _has_storage_[1];
  ModelSpec *modelSpec;
  Input *input;
} RegressionRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "modelSpec",
        .dataTypeSpecific.className = GPBStringifySymbol(ModelSpec),
        .number = RegressionRequest_FieldNumber_ModelSpec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegressionRequest__storage_, modelSpec),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "input",
        .dataTypeSpecific.className = GPBStringifySymbol(Input),
        .number = RegressionRequest_FieldNumber_Input,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RegressionRequest__storage_, input),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegressionRequest class]
                                     rootClass:[RegressionRoot class]
                                          file:RegressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegressionRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RegressionResponse

@implementation RegressionResponse

@dynamic hasResult, result;

typedef struct RegressionResponse__storage_ {
  uint32_t _has_storage_[1];
  RegressionResult *result;
} RegressionResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.className = GPBStringifySymbol(RegressionResult),
        .number = RegressionResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RegressionResponse__storage_, result),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RegressionResponse class]
                                     rootClass:[RegressionRoot class]
                                          file:RegressionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RegressionResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
