// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_serving/apis/input.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow_serving/apis/Input.pbobjc.h"
 #import "tensorflow/core/example/Example.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - InputRoot

@implementation InputRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - InputRoot_FileDescriptor

static GPBFileDescriptor *InputRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow.serving"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ExampleList

@implementation ExampleList

@dynamic examplesArray, examplesArray_Count;

typedef struct ExampleList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *examplesArray;
} ExampleList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "examplesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Example),
        .number = ExampleList_FieldNumber_ExamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExampleList__storage_, examplesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExampleList class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExampleList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ExampleListWithContext

@implementation ExampleListWithContext

@dynamic examplesArray, examplesArray_Count;
@dynamic hasContext, context;

typedef struct ExampleListWithContext__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *examplesArray;
  Example *context;
} ExampleListWithContext__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "examplesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Example),
        .number = ExampleListWithContext_FieldNumber_ExamplesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExampleListWithContext__storage_, examplesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "context",
        .dataTypeSpecific.className = GPBStringifySymbol(Example),
        .number = ExampleListWithContext_FieldNumber_Context,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ExampleListWithContext__storage_, context),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExampleListWithContext class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExampleListWithContext__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Input

@implementation Input

@dynamic kindOneOfCase;
@dynamic exampleList;
@dynamic exampleListWithContext;

typedef struct Input__storage_ {
  uint32_t _has_storage_[2];
  ExampleList *exampleList;
  ExampleListWithContext *exampleListWithContext;
} Input__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "exampleList",
        .dataTypeSpecific.className = GPBStringifySymbol(ExampleList),
        .number = Input_FieldNumber_ExampleList,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Input__storage_, exampleList),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exampleListWithContext",
        .dataTypeSpecific.className = GPBStringifySymbol(ExampleListWithContext),
        .number = Input_FieldNumber_ExampleListWithContext,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Input__storage_, exampleListWithContext),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Input class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Input__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "kind",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Input_ClearKindOneOfCase(Input *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
