// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tensor_bundle.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/protobuf/TensorBundle.pbobjc.h"
 #import "tensorflow/core/framework/TensorShape.pbobjc.h"
 #import "tensorflow/core/framework/TensorSlice.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
 #import "tensorflow/core/framework/Versions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TensorBundleRoot

@implementation TensorBundleRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TensorBundleRoot_FileDescriptor

static GPBFileDescriptor *TensorBundleRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - BundleHeaderProto

@implementation BundleHeaderProto

@dynamic numShards;
@dynamic endianness;
@dynamic hasVersion, version;

typedef struct BundleHeaderProto__storage_ {
  uint32_t _has_storage_[1];
  int32_t numShards;
  BundleHeaderProto_Endianness endianness;
  VersionDef *version;
} BundleHeaderProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "numShards",
        .dataTypeSpecific.className = NULL,
        .number = BundleHeaderProto_FieldNumber_NumShards,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BundleHeaderProto__storage_, numShards),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "endianness",
        .dataTypeSpecific.enumDescFunc = BundleHeaderProto_Endianness_EnumDescriptor,
        .number = BundleHeaderProto_FieldNumber_Endianness,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BundleHeaderProto__storage_, endianness),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "version",
        .dataTypeSpecific.className = GPBStringifySymbol(VersionDef),
        .number = BundleHeaderProto_FieldNumber_Version,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BundleHeaderProto__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BundleHeaderProto class]
                                     rootClass:[TensorBundleRoot class]
                                          file:TensorBundleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BundleHeaderProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BundleHeaderProto_Endianness_RawValue(BundleHeaderProto *message) {
  GPBDescriptor *descriptor = [BundleHeaderProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BundleHeaderProto_FieldNumber_Endianness];
  return GPBGetMessageInt32Field(message, field);
}

void SetBundleHeaderProto_Endianness_RawValue(BundleHeaderProto *message, int32_t value) {
  GPBDescriptor *descriptor = [BundleHeaderProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BundleHeaderProto_FieldNumber_Endianness];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum BundleHeaderProto_Endianness

GPBEnumDescriptor *BundleHeaderProto_Endianness_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Little\000Big\000";
    static const int32_t values[] = {
        BundleHeaderProto_Endianness_Little,
        BundleHeaderProto_Endianness_Big,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(BundleHeaderProto_Endianness)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:BundleHeaderProto_Endianness_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL BundleHeaderProto_Endianness_IsValidValue(int32_t value__) {
  switch (value__) {
    case BundleHeaderProto_Endianness_Little:
    case BundleHeaderProto_Endianness_Big:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - BundleEntryProto

@implementation BundleEntryProto

@dynamic dtype;
@dynamic hasShape, shape;
@dynamic shardId;
@dynamic offset;
@dynamic size;
@dynamic crc32C;
@dynamic slicesArray, slicesArray_Count;

typedef struct BundleEntryProto__storage_ {
  uint32_t _has_storage_[1];
  DataType dtype;
  int32_t shardId;
  uint32_t crc32C;
  TensorShapeProto *shape;
  NSMutableArray *slicesArray;
  int64_t offset;
  int64_t size;
} BundleEntryProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dtype",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = BundleEntryProto_FieldNumber_Dtype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = BundleEntryProto_FieldNumber_Shape,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shardId",
        .dataTypeSpecific.className = NULL,
        .number = BundleEntryProto_FieldNumber_ShardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, shardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = BundleEntryProto_FieldNumber_Offset,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = BundleEntryProto_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "crc32C",
        .dataTypeSpecific.className = NULL,
        .number = BundleEntryProto_FieldNumber_Crc32C,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, crc32C),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeFixed32,
      },
      {
        .name = "slicesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorSliceProto),
        .number = BundleEntryProto_FieldNumber_SlicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BundleEntryProto__storage_, slicesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BundleEntryProto class]
                                     rootClass:[TensorBundleRoot class]
                                          file:TensorBundleRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BundleEntryProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\005!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t BundleEntryProto_Dtype_RawValue(BundleEntryProto *message) {
  GPBDescriptor *descriptor = [BundleEntryProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BundleEntryProto_FieldNumber_Dtype];
  return GPBGetMessageInt32Field(message, field);
}

void SetBundleEntryProto_Dtype_RawValue(BundleEntryProto *message, int32_t value) {
  GPBDescriptor *descriptor = [BundleEntryProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:BundleEntryProto_FieldNumber_Dtype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
