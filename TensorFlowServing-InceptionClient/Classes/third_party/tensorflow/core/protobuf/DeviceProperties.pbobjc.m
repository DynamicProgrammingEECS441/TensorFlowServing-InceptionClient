// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_properties.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/protobuf/DeviceProperties.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - DevicePropertiesRoot

@implementation DevicePropertiesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DevicePropertiesRoot_FileDescriptor

static GPBFileDescriptor *DevicePropertiesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DeviceProperties

@implementation DeviceProperties

@dynamic type;
@dynamic vendor;
@dynamic model;
@dynamic frequency;
@dynamic numCores;
@dynamic environment, environment_Count;
@dynamic numRegisters;
@dynamic l1CacheSize;
@dynamic l2CacheSize;
@dynamic l3CacheSize;
@dynamic sharedMemorySizePerMultiprocessor;
@dynamic memorySize;
@dynamic bandwidth;

typedef struct DeviceProperties__storage_ {
  uint32_t _has_storage_[1];
  NSString *type;
  NSString *vendor;
  NSString *model;
  NSMutableDictionary *environment;
  int64_t frequency;
  int64_t numCores;
  int64_t numRegisters;
  int64_t l1CacheSize;
  int64_t l2CacheSize;
  int64_t l3CacheSize;
  int64_t sharedMemorySizePerMultiprocessor;
  int64_t memorySize;
  int64_t bandwidth;
} DeviceProperties__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "vendor",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_Vendor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, vendor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "model",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_Model,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, model),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "frequency",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_Frequency,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, frequency),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "numCores",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_NumCores,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, numCores),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "environment",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_Environment,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, environment),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numRegisters",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_NumRegisters,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, numRegisters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "l1CacheSize",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_L1CacheSize,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, l1CacheSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "l2CacheSize",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_L2CacheSize,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, l2CacheSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "l3CacheSize",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_L3CacheSize,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, l3CacheSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sharedMemorySizePerMultiprocessor",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_SharedMemorySizePerMultiprocessor,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, sharedMemorySizePerMultiprocessor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "memorySize",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_MemorySize,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, memorySize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "bandwidth",
        .dataTypeSpecific.className = NULL,
        .number = DeviceProperties_FieldNumber_Bandwidth,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(DeviceProperties__storage_, bandwidth),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeviceProperties class]
                                     rootClass:[DevicePropertiesRoot class]
                                          file:DevicePropertiesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeviceProperties__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
