// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DebugTensorWatch;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - DebugRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface DebugRoot : GPBRootObject
@end

#pragma mark - DebugTensorWatch

typedef GPB_ENUM(DebugTensorWatch_FieldNumber) {
  DebugTensorWatch_FieldNumber_NodeName = 1,
  DebugTensorWatch_FieldNumber_OutputSlot = 2,
  DebugTensorWatch_FieldNumber_DebugOpsArray = 3,
  DebugTensorWatch_FieldNumber_DebugUrlsArray = 4,
  DebugTensorWatch_FieldNumber_TolerateDebugOpCreationFailures = 5,
};

/**
 * EXPERIMENTAL. Option for watching a node.
 **/
@interface DebugTensorWatch : GPBMessage

/** Name of the node to watch. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeName;

/**
 * Output slot to watch.
 * The semantics of output_slot == -1 is that the node is only watched for
 * completion, but not for any output tensors. See NodeCompletionCallback
 * in debug_gateway.h.
 * TODO(cais): Implement this semantics.
 **/
@property(nonatomic, readwrite) int32_t outputSlot;

/**
 * Name(s) of the debugging op(s).
 * One or more than one probes on a tensor.
 * e.g., {"DebugIdentity", "DebugNanCount"}
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *debugOpsArray;
/** The number of items in @c debugOpsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger debugOpsArray_Count;

/**
 * URL(s) for debug targets(s).
 *   E.g., "file:///foo/tfdbg_dump", "grpc://localhost:11011"
 * Each debug op listed in debug_ops will publish its output tensor (debug
 * signal) to all URLs in debug_urls.
 *
 * N.B. Session::Run() supports concurrent invocations of the same inputs
 * (feed keys), outputs and target nodes. If such concurrent invocations
 * are to be debugged, the callers of Session::Run() must use distinct
 * debug_urls to make sure that the streamed or dumped events do not overlap
 * among the invocations.
 * TODO(cais): More visible documentation of this in g3docs.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *debugUrlsArray;
/** The number of items in @c debugUrlsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger debugUrlsArray_Count;

/**
 * Do not error out if debug op creation fails (e.g., due to dtype
 * incompatibility). Instead, just log the failure.
 **/
@property(nonatomic, readwrite) BOOL tolerateDebugOpCreationFailures;

@end

#pragma mark - DebugOptions

typedef GPB_ENUM(DebugOptions_FieldNumber) {
  DebugOptions_FieldNumber_DebugTensorWatchOptsArray = 4,
  DebugOptions_FieldNumber_GlobalStep = 10,
};

/**
 * EXPERIMENTAL. Options for initializing DebuggerState.
 **/
@interface DebugOptions : GPBMessage

/** Debugging options */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DebugTensorWatch*> *debugTensorWatchOptsArray;
/** The number of items in @c debugTensorWatchOptsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger debugTensorWatchOptsArray_Count;

/**
 * Caller-specified global step count.
 * Note that this is distinct from the session run count and the executor
 * step count.
 **/
@property(nonatomic, readwrite) int64_t globalStep;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
