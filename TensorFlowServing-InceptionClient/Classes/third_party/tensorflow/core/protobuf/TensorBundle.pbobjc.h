// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tensor_bundle.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class TensorShapeProto;
@class TensorSliceProto;
@class VersionDef;
GPB_ENUM_FWD_DECLARE(DataType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum BundleHeaderProto_Endianness

/**
 * An enum indicating the endianness of the platform that produced this
 * bundle.  A bundle can only be read by a platform with matching endianness.
 * Defaults to LITTLE, as most modern platforms are little-endian.
 *
 * Affects the binary tensor data bytes only, not the metadata in protobufs.
 **/
typedef GPB_ENUM(BundleHeaderProto_Endianness) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  BundleHeaderProto_Endianness_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  BundleHeaderProto_Endianness_Little = 0,
  BundleHeaderProto_Endianness_Big = 1,
};

GPBEnumDescriptor *BundleHeaderProto_Endianness_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL BundleHeaderProto_Endianness_IsValidValue(int32_t value);

#pragma mark - TensorBundleRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface TensorBundleRoot : GPBRootObject
@end

#pragma mark - BundleHeaderProto

typedef GPB_ENUM(BundleHeaderProto_FieldNumber) {
  BundleHeaderProto_FieldNumber_NumShards = 1,
  BundleHeaderProto_FieldNumber_Endianness = 2,
  BundleHeaderProto_FieldNumber_Version = 3,
};

/**
 * Special header that is associated with a bundle.
 *
 * TODO(zongheng,zhifengc): maybe in the future, we can add information about
 * which binary produced this checkpoint, timestamp, etc. Sometime, these can be
 * valuable debugging information. And if needed, these can be used as defensive
 * information ensuring reader (binary version) of the checkpoint and the writer
 * (binary version) must match within certain range, etc.
 **/
@interface BundleHeaderProto : GPBMessage

/** Number of data files in the bundle. */
@property(nonatomic, readwrite) int32_t numShards;

@property(nonatomic, readwrite) BundleHeaderProto_Endianness endianness;

/** Versioning of the tensor bundle format. */
@property(nonatomic, readwrite, strong, null_resettable) VersionDef *version;
/** Test to see if @c version has been set. */
@property(nonatomic, readwrite) BOOL hasVersion;

@end

/**
 * Fetches the raw value of a @c BundleHeaderProto's @c endianness property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t BundleHeaderProto_Endianness_RawValue(BundleHeaderProto *message);
/**
 * Sets the raw value of an @c BundleHeaderProto's @c endianness property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetBundleHeaderProto_Endianness_RawValue(BundleHeaderProto *message, int32_t value);

#pragma mark - BundleEntryProto

typedef GPB_ENUM(BundleEntryProto_FieldNumber) {
  BundleEntryProto_FieldNumber_Dtype = 1,
  BundleEntryProto_FieldNumber_Shape = 2,
  BundleEntryProto_FieldNumber_ShardId = 3,
  BundleEntryProto_FieldNumber_Offset = 4,
  BundleEntryProto_FieldNumber_Size = 5,
  BundleEntryProto_FieldNumber_Crc32C = 6,
  BundleEntryProto_FieldNumber_SlicesArray = 7,
};

/**
 * Describes the metadata related to a checkpointed tensor.
 **/
@interface BundleEntryProto : GPBMessage

/** The tensor dtype and shape. */
@property(nonatomic, readwrite) enum DataType dtype;

@property(nonatomic, readwrite, strong, null_resettable) TensorShapeProto *shape;
/** Test to see if @c shape has been set. */
@property(nonatomic, readwrite) BOOL hasShape;

/**
 * The binary content of the tensor lies in:
 *   File "shard_id": bytes [offset, offset + size).
 **/
@property(nonatomic, readwrite) int32_t shardId;

@property(nonatomic, readwrite) int64_t offset;

@property(nonatomic, readwrite) int64_t size;

/** The CRC32C checksum of the tensor bytes. */
@property(nonatomic, readwrite) uint32_t crc32C;

/**
 * Iff present, this entry represents a partitioned tensor.  The previous
 * fields are interpreted as follows:
 *
 *   "dtype", "shape": describe the full tensor.
 *   "shard_id", "offset", "size", "crc32c": all IGNORED.
 *      These information for each slice can be looked up in their own
 *      BundleEntryProto, keyed by each "slice_name".
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<TensorSliceProto*> *slicesArray;
/** The number of items in @c slicesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger slicesArray_Count;

@end

/**
 * Fetches the raw value of a @c BundleEntryProto's @c dtype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t BundleEntryProto_Dtype_RawValue(BundleEntryProto *message);
/**
 * Sets the raw value of an @c BundleEntryProto's @c dtype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetBundleEntryProto_Dtype_RawValue(BundleEntryProto *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
