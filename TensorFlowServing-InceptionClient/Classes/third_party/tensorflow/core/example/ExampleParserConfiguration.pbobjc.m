// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/example/example_parser_configuration.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/example/ExampleParserConfiguration.pbobjc.h"
 #import "tensorflow/core/framework/TensorShape.pbobjc.h"
 #import "tensorflow/core/framework/Tensor.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - ExampleParserConfigurationRoot

@implementation ExampleParserConfigurationRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - ExampleParserConfigurationRoot_FileDescriptor

static GPBFileDescriptor *ExampleParserConfigurationRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - VarLenFeatureProto

@implementation VarLenFeatureProto

@dynamic dtype;
@dynamic valuesOutputTensorName;
@dynamic indicesOutputTensorName;
@dynamic shapesOutputTensorName;

typedef struct VarLenFeatureProto__storage_ {
  uint32_t _has_storage_[1];
  DataType dtype;
  NSString *valuesOutputTensorName;
  NSString *indicesOutputTensorName;
  NSString *shapesOutputTensorName;
} VarLenFeatureProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dtype",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = VarLenFeatureProto_FieldNumber_Dtype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VarLenFeatureProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "valuesOutputTensorName",
        .dataTypeSpecific.className = NULL,
        .number = VarLenFeatureProto_FieldNumber_ValuesOutputTensorName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VarLenFeatureProto__storage_, valuesOutputTensorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "indicesOutputTensorName",
        .dataTypeSpecific.className = NULL,
        .number = VarLenFeatureProto_FieldNumber_IndicesOutputTensorName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VarLenFeatureProto__storage_, indicesOutputTensorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shapesOutputTensorName",
        .dataTypeSpecific.className = NULL,
        .number = VarLenFeatureProto_FieldNumber_ShapesOutputTensorName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VarLenFeatureProto__storage_, shapesOutputTensorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VarLenFeatureProto class]
                                     rootClass:[ExampleParserConfigurationRoot class]
                                          file:ExampleParserConfigurationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VarLenFeatureProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VarLenFeatureProto_Dtype_RawValue(VarLenFeatureProto *message) {
  GPBDescriptor *descriptor = [VarLenFeatureProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VarLenFeatureProto_FieldNumber_Dtype];
  return GPBGetMessageInt32Field(message, field);
}

void SetVarLenFeatureProto_Dtype_RawValue(VarLenFeatureProto *message, int32_t value) {
  GPBDescriptor *descriptor = [VarLenFeatureProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VarLenFeatureProto_FieldNumber_Dtype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FixedLenFeatureProto

@implementation FixedLenFeatureProto

@dynamic dtype;
@dynamic hasShape, shape;
@dynamic hasDefaultValue, defaultValue;
@dynamic valuesOutputTensorName;

typedef struct FixedLenFeatureProto__storage_ {
  uint32_t _has_storage_[1];
  DataType dtype;
  TensorShapeProto *shape;
  TensorProto *defaultValue;
  NSString *valuesOutputTensorName;
} FixedLenFeatureProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dtype",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = FixedLenFeatureProto_FieldNumber_Dtype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FixedLenFeatureProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = FixedLenFeatureProto_FieldNumber_Shape,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FixedLenFeatureProto__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorProto),
        .number = FixedLenFeatureProto_FieldNumber_DefaultValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FixedLenFeatureProto__storage_, defaultValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "valuesOutputTensorName",
        .dataTypeSpecific.className = NULL,
        .number = FixedLenFeatureProto_FieldNumber_ValuesOutputTensorName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FixedLenFeatureProto__storage_, valuesOutputTensorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FixedLenFeatureProto class]
                                     rootClass:[ExampleParserConfigurationRoot class]
                                          file:ExampleParserConfigurationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FixedLenFeatureProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FixedLenFeatureProto_Dtype_RawValue(FixedLenFeatureProto *message) {
  GPBDescriptor *descriptor = [FixedLenFeatureProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FixedLenFeatureProto_FieldNumber_Dtype];
  return GPBGetMessageInt32Field(message, field);
}

void SetFixedLenFeatureProto_Dtype_RawValue(FixedLenFeatureProto *message, int32_t value) {
  GPBDescriptor *descriptor = [FixedLenFeatureProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FixedLenFeatureProto_FieldNumber_Dtype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - FeatureConfiguration

@implementation FeatureConfiguration

@dynamic configOneOfCase;
@dynamic fixedLenFeature;
@dynamic varLenFeature;

typedef struct FeatureConfiguration__storage_ {
  uint32_t _has_storage_[2];
  FixedLenFeatureProto *fixedLenFeature;
  VarLenFeatureProto *varLenFeature;
} FeatureConfiguration__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fixedLenFeature",
        .dataTypeSpecific.className = GPBStringifySymbol(FixedLenFeatureProto),
        .number = FeatureConfiguration_FieldNumber_FixedLenFeature,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FeatureConfiguration__storage_, fixedLenFeature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "varLenFeature",
        .dataTypeSpecific.className = GPBStringifySymbol(VarLenFeatureProto),
        .number = FeatureConfiguration_FieldNumber_VarLenFeature,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(FeatureConfiguration__storage_, varLenFeature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FeatureConfiguration class]
                                     rootClass:[ExampleParserConfigurationRoot class]
                                          file:ExampleParserConfigurationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FeatureConfiguration__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "config",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void FeatureConfiguration_ClearConfigOneOfCase(FeatureConfiguration *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - ExampleParserConfiguration

@implementation ExampleParserConfiguration

@dynamic featureMap, featureMap_Count;

typedef struct ExampleParserConfiguration__storage_ {
  uint32_t _has_storage_[1];
  NSMutableDictionary *featureMap;
} ExampleParserConfiguration__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "featureMap",
        .dataTypeSpecific.className = GPBStringifySymbol(FeatureConfiguration),
        .number = ExampleParserConfiguration_FieldNumber_FeatureMap,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ExampleParserConfiguration__storage_, featureMap),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ExampleParserConfiguration class]
                                     rootClass:[ExampleParserConfigurationRoot class]
                                          file:ExampleParserConfigurationRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ExampleParserConfiguration__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
