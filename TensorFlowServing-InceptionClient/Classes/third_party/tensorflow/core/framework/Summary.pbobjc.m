// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/summary.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/Summary.pbobjc.h"
 #import "tensorflow/core/framework/Tensor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - SummaryRoot

@implementation SummaryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SummaryRoot_FileDescriptor

static GPBFileDescriptor *SummaryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SummaryDescription

@implementation SummaryDescription

@dynamic typeHint;

typedef struct SummaryDescription__storage_ {
  uint32_t _has_storage_[1];
  NSString *typeHint;
} SummaryDescription__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "typeHint",
        .dataTypeSpecific.className = NULL,
        .number = SummaryDescription_FieldNumber_TypeHint,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SummaryDescription__storage_, typeHint),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SummaryDescription class]
                                     rootClass:[SummaryRoot class]
                                          file:SummaryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SummaryDescription__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - HistogramProto

@implementation HistogramProto

@dynamic min;
@dynamic max;
@dynamic num;
@dynamic sum;
@dynamic sumSquares;
@dynamic bucketLimitArray, bucketLimitArray_Count;
@dynamic bucketArray, bucketArray_Count;

typedef struct HistogramProto__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *bucketLimitArray;
  GPBDoubleArray *bucketArray;
  double min;
  double max;
  double num;
  double sum;
  double sumSquares;
} HistogramProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "min",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_Min,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_Num,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sum",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_Sum,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, sum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sumSquares",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_SumSquares,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, sumSquares),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bucketLimitArray",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_BucketLimitArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, bucketLimitArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "bucketArray",
        .dataTypeSpecific.className = NULL,
        .number = HistogramProto_FieldNumber_BucketArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(HistogramProto__storage_, bucketArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HistogramProto class]
                                     rootClass:[SummaryRoot class]
                                          file:SummaryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HistogramProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Summary

@implementation Summary

@dynamic valueArray, valueArray_Count;

typedef struct Summary__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valueArray;
} Summary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "valueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Summary_Value),
        .number = Summary_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Summary__storage_, valueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Summary class]
                                     rootClass:[SummaryRoot class]
                                          file:SummaryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Summary__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Summary_Image

@implementation Summary_Image

@dynamic height;
@dynamic width;
@dynamic colorspace;
@dynamic encodedImageString;

typedef struct Summary_Image__storage_ {
  uint32_t _has_storage_[1];
  int32_t height;
  int32_t width;
  int32_t colorspace;
  NSData *encodedImageString;
} Summary_Image__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "height",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Image_FieldNumber_Height,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Summary_Image__storage_, height),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Image_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Summary_Image__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "colorspace",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Image_FieldNumber_Colorspace,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Summary_Image__storage_, colorspace),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "encodedImageString",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Image_FieldNumber_EncodedImageString,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Summary_Image__storage_, encodedImageString),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Summary_Image class]
                                     rootClass:[SummaryRoot class]
                                          file:SummaryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Summary_Image__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Summary)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Summary_Audio

@implementation Summary_Audio

@dynamic sampleRate;
@dynamic numChannels;
@dynamic lengthFrames;
@dynamic encodedAudioString;
@dynamic contentType;

typedef struct Summary_Audio__storage_ {
  uint32_t _has_storage_[1];
  float sampleRate;
  NSData *encodedAudioString;
  NSString *contentType;
  int64_t numChannels;
  int64_t lengthFrames;
} Summary_Audio__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sampleRate",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Audio_FieldNumber_SampleRate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Summary_Audio__storage_, sampleRate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "numChannels",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Audio_FieldNumber_NumChannels,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Summary_Audio__storage_, numChannels),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lengthFrames",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Audio_FieldNumber_LengthFrames,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Summary_Audio__storage_, lengthFrames),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "encodedAudioString",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Audio_FieldNumber_EncodedAudioString,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Summary_Audio__storage_, encodedAudioString),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "contentType",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Audio_FieldNumber_ContentType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Summary_Audio__storage_, contentType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Summary_Audio class]
                                     rootClass:[SummaryRoot class]
                                          file:SummaryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Summary_Audio__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Summary)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Summary_Value

@implementation Summary_Value

@dynamic valueOneOfCase;
@dynamic nodeName;
@dynamic tag;
@dynamic simpleValue;
@dynamic obsoleteOldStyleHistogram;
@dynamic image;
@dynamic histo;
@dynamic audio;
@dynamic tensor;

typedef struct Summary_Value__storage_ {
  uint32_t _has_storage_[2];
  float simpleValue;
  NSString *tag;
  NSData *obsoleteOldStyleHistogram;
  Summary_Image *image;
  HistogramProto *histo;
  Summary_Audio *audio;
  NSString *nodeName;
  TensorProto *tensor;
} Summary_Value__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Value_FieldNumber_Tag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "simpleValue",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Value_FieldNumber_SimpleValue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, simpleValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "obsoleteOldStyleHistogram",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Value_FieldNumber_ObsoleteOldStyleHistogram,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, obsoleteOldStyleHistogram),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "image",
        .dataTypeSpecific.className = GPBStringifySymbol(Summary_Image),
        .number = Summary_Value_FieldNumber_Image,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, image),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "histo",
        .dataTypeSpecific.className = GPBStringifySymbol(HistogramProto),
        .number = Summary_Value_FieldNumber_Histo,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, histo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audio",
        .dataTypeSpecific.className = GPBStringifySymbol(Summary_Audio),
        .number = Summary_Value_FieldNumber_Audio,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, audio),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nodeName",
        .dataTypeSpecific.className = NULL,
        .number = Summary_Value_FieldNumber_NodeName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, nodeName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tensor",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorProto),
        .number = Summary_Value_FieldNumber_Tensor,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Summary_Value__storage_, tensor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Summary_Value class]
                                     rootClass:[SummaryRoot class]
                                          file:SummaryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Summary_Value__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "value",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(Summary)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Summary_Value_ClearValueOneOfCase(Summary_Value *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
