// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/node_def.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AttrValue;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - NodeDefRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface NodeDefRoot : GPBRootObject
@end

#pragma mark - NodeDef

typedef GPB_ENUM(NodeDef_FieldNumber) {
  NodeDef_FieldNumber_Name = 1,
  NodeDef_FieldNumber_Op = 2,
  NodeDef_FieldNumber_InputArray = 3,
  NodeDef_FieldNumber_Device = 4,
  NodeDef_FieldNumber_Attr = 5,
};

@interface NodeDef : GPBMessage

/**
 * The name given to this operator. Used for naming inputs,
 * logging, visualization, etc.  Unique within a single GraphDef.
 * Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_./]*".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * The operation name.  There may be custom parameters in attrs.
 * Op names starting with an underscore are reserved for internal use.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *op;

/**
 * Each input is "node:src_output" with "node" being a string name and
 * "src_output" indicating which output tensor to use from "node". If
 * "src_output" is 0 the ":0" suffix can be omitted.  Regular inputs
 * may optionally be followed by control inputs that have the format
 * "^node".
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *inputArray;
/** The number of items in @c inputArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inputArray_Count;

/**
 * A (possibly partial) specification for the device on which this
 * node should be placed.
 * The expected syntax for this string is as follows:
 *
 * DEVICE_SPEC ::= PARTIAL_SPEC
 *
 * PARTIAL_SPEC ::= ("/" CONSTRAINT) *
 * CONSTRAINT ::= ("job:" JOB_NAME)
 *              | ("replica:" [1-9][0-9]*)
 *              | ("task:" [1-9][0-9]*)
 *              | ( ("gpu" | "cpu") ":" ([1-9][0-9]* | "*") )
 *
 * Valid values for this string include:
 * * "/job:worker/replica:0/task:1/gpu:3"  (full specification)
 * * "/job:worker/gpu:3"                   (partial specification)
 * * ""                                    (no specification)
 *
 * If the constraints do not resolve to a single device (or if this
 * field is empty or not present), the runtime will attempt to
 * choose a device automatically.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *device;

/**
 * Operation-specific graph-construction-time configuration.
 * Note that this should include all attrs defined in the
 * corresponding OpDef, including those with a value matching
 * the default -- this allows the default to change and makes
 * NodeDefs easier to interpret on their own.  However, if
 * an attr with a default is not specified in this list, the
 * default will be used.
 * The "names" (keys) must match the regexp "[a-z][a-z0-9_]+" (and
 * one of the names from the corresponding OpDef's attr field).
 * The values must have a type matching the corresponding OpDef
 * attr's type field.
 * TODO(josh11b): Add some examples here showing best practices.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, AttrValue*> *attr;
/** The number of items in @c attr without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attr_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
