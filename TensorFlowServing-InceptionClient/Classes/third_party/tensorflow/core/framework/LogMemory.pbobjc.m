// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/log_memory.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/LogMemory.pbobjc.h"
 #import "tensorflow/core/framework/TensorDescription.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LogMemoryRoot

@implementation LogMemoryRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LogMemoryRoot_FileDescriptor

static GPBFileDescriptor *LogMemoryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - MemoryLogStep

@implementation MemoryLogStep

@dynamic stepId;
@dynamic handle;

typedef struct MemoryLogStep__storage_ {
  uint32_t _has_storage_[1];
  NSString *handle;
  int64_t stepId;
} MemoryLogStep__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stepId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogStep_FieldNumber_StepId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemoryLogStep__storage_, stepId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "handle",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogStep_FieldNumber_Handle,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemoryLogStep__storage_, handle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemoryLogStep class]
                                     rootClass:[LogMemoryRoot class]
                                          file:LogMemoryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemoryLogStep__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemoryLogTensorAllocation

@implementation MemoryLogTensorAllocation

@dynamic stepId;
@dynamic kernelName;
@dynamic hasTensor, tensor;

typedef struct MemoryLogTensorAllocation__storage_ {
  uint32_t _has_storage_[1];
  NSString *kernelName;
  TensorDescription *tensor;
  int64_t stepId;
} MemoryLogTensorAllocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stepId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorAllocation_FieldNumber_StepId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemoryLogTensorAllocation__storage_, stepId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "kernelName",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorAllocation_FieldNumber_KernelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemoryLogTensorAllocation__storage_, kernelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tensor",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorDescription),
        .number = MemoryLogTensorAllocation_FieldNumber_Tensor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MemoryLogTensorAllocation__storage_, tensor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemoryLogTensorAllocation class]
                                     rootClass:[LogMemoryRoot class]
                                          file:LogMemoryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemoryLogTensorAllocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemoryLogTensorDeallocation

@implementation MemoryLogTensorDeallocation

@dynamic allocationId;
@dynamic allocatorName;

typedef struct MemoryLogTensorDeallocation__storage_ {
  uint32_t _has_storage_[1];
  NSString *allocatorName;
  int64_t allocationId;
} MemoryLogTensorDeallocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "allocationId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorDeallocation_FieldNumber_AllocationId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemoryLogTensorDeallocation__storage_, allocationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "allocatorName",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorDeallocation_FieldNumber_AllocatorName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemoryLogTensorDeallocation__storage_, allocatorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemoryLogTensorDeallocation class]
                                     rootClass:[LogMemoryRoot class]
                                          file:LogMemoryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemoryLogTensorDeallocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemoryLogTensorOutput

@implementation MemoryLogTensorOutput

@dynamic stepId;
@dynamic kernelName;
@dynamic index;
@dynamic hasTensor, tensor;

typedef struct MemoryLogTensorOutput__storage_ {
  uint32_t _has_storage_[1];
  int32_t index;
  NSString *kernelName;
  TensorDescription *tensor;
  int64_t stepId;
} MemoryLogTensorOutput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stepId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorOutput_FieldNumber_StepId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemoryLogTensorOutput__storage_, stepId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "kernelName",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorOutput_FieldNumber_KernelName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemoryLogTensorOutput__storage_, kernelName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogTensorOutput_FieldNumber_Index,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MemoryLogTensorOutput__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tensor",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorDescription),
        .number = MemoryLogTensorOutput_FieldNumber_Tensor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MemoryLogTensorOutput__storage_, tensor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemoryLogTensorOutput class]
                                     rootClass:[LogMemoryRoot class]
                                          file:LogMemoryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemoryLogTensorOutput__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemoryLogRawAllocation

@implementation MemoryLogRawAllocation

@dynamic stepId;
@dynamic operation;
@dynamic numBytes;
@dynamic ptr;
@dynamic allocationId;
@dynamic allocatorName;

typedef struct MemoryLogRawAllocation__storage_ {
  uint32_t _has_storage_[1];
  NSString *operation;
  NSString *allocatorName;
  int64_t stepId;
  int64_t numBytes;
  uint64_t ptr;
  int64_t allocationId;
} MemoryLogRawAllocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stepId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawAllocation_FieldNumber_StepId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemoryLogRawAllocation__storage_, stepId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operation",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawAllocation_FieldNumber_Operation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemoryLogRawAllocation__storage_, operation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numBytes",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawAllocation_FieldNumber_NumBytes,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MemoryLogRawAllocation__storage_, numBytes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "ptr",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawAllocation_FieldNumber_Ptr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MemoryLogRawAllocation__storage_, ptr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "allocationId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawAllocation_FieldNumber_AllocationId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MemoryLogRawAllocation__storage_, allocationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "allocatorName",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawAllocation_FieldNumber_AllocatorName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MemoryLogRawAllocation__storage_, allocatorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemoryLogRawAllocation class]
                                     rootClass:[LogMemoryRoot class]
                                          file:LogMemoryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemoryLogRawAllocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MemoryLogRawDeallocation

@implementation MemoryLogRawDeallocation

@dynamic stepId;
@dynamic operation;
@dynamic allocationId;
@dynamic allocatorName;
@dynamic deferred;

typedef struct MemoryLogRawDeallocation__storage_ {
  uint32_t _has_storage_[1];
  NSString *operation;
  NSString *allocatorName;
  int64_t stepId;
  int64_t allocationId;
} MemoryLogRawDeallocation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stepId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawDeallocation_FieldNumber_StepId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MemoryLogRawDeallocation__storage_, stepId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "operation",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawDeallocation_FieldNumber_Operation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MemoryLogRawDeallocation__storage_, operation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "allocationId",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawDeallocation_FieldNumber_AllocationId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MemoryLogRawDeallocation__storage_, allocationId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "allocatorName",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawDeallocation_FieldNumber_AllocatorName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MemoryLogRawDeallocation__storage_, allocatorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deferred",
        .dataTypeSpecific.className = NULL,
        .number = MemoryLogRawDeallocation_FieldNumber_Deferred,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MemoryLogRawDeallocation class]
                                     rootClass:[LogMemoryRoot class]
                                          file:LogMemoryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MemoryLogRawDeallocation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
