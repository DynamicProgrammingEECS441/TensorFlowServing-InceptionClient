// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/summary.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class HistogramProto;
@class Summary_Audio;
@class Summary_Image;
@class Summary_Value;
@class TensorProto;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - SummaryRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface SummaryRoot : GPBRootObject
@end

#pragma mark - SummaryDescription

typedef GPB_ENUM(SummaryDescription_FieldNumber) {
  SummaryDescription_FieldNumber_TypeHint = 1,
};

/**
 * Metadata associated with a series of Summary data
 **/
@interface SummaryDescription : GPBMessage

/**
 * Hint on how plugins should process the data in this series.
 * Supported values include "scalar", "histogram", "image", "audio"
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *typeHint;

@end

#pragma mark - HistogramProto

typedef GPB_ENUM(HistogramProto_FieldNumber) {
  HistogramProto_FieldNumber_Min = 1,
  HistogramProto_FieldNumber_Max = 2,
  HistogramProto_FieldNumber_Num = 3,
  HistogramProto_FieldNumber_Sum = 4,
  HistogramProto_FieldNumber_SumSquares = 5,
  HistogramProto_FieldNumber_BucketLimitArray = 6,
  HistogramProto_FieldNumber_BucketArray = 7,
};

/**
 * Serialization format for histogram module in
 * core/lib/histogram/histogram.h
 **/
@interface HistogramProto : GPBMessage

@property(nonatomic, readwrite) double min;

@property(nonatomic, readwrite) double max;

@property(nonatomic, readwrite) double num;

@property(nonatomic, readwrite) double sum;

@property(nonatomic, readwrite) double sumSquares;

/**
 * Parallel arrays encoding the bucket boundaries and the bucket values.
 * bucket(i) is the count for the bucket i.  The range for
 * a bucket is:
 *   i == 0:  -DBL_MAX .. bucket_limit(0)
 *   i != 0:  bucket_limit(i-1) .. bucket_limit(i)
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *bucketLimitArray;
/** The number of items in @c bucketLimitArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger bucketLimitArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *bucketArray;
/** The number of items in @c bucketArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger bucketArray_Count;

@end

#pragma mark - Summary

typedef GPB_ENUM(Summary_FieldNumber) {
  Summary_FieldNumber_ValueArray = 1,
};

/**
 * A Summary is a set of named values to be displayed by the
 * visualizer.
 *
 * Summaries are produced regularly during training, as controlled by
 * the "summary_interval_secs" attribute of the training operation.
 * Summaries are also produced at the end of an evaluation.
 **/
@interface Summary : GPBMessage

/** Set of values for the summary. */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Summary_Value*> *valueArray;
/** The number of items in @c valueArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger valueArray_Count;

@end

#pragma mark - Summary_Image

typedef GPB_ENUM(Summary_Image_FieldNumber) {
  Summary_Image_FieldNumber_Height = 1,
  Summary_Image_FieldNumber_Width = 2,
  Summary_Image_FieldNumber_Colorspace = 3,
  Summary_Image_FieldNumber_EncodedImageString = 4,
};

@interface Summary_Image : GPBMessage

/** Dimensions of the image. */
@property(nonatomic, readwrite) int32_t height;

@property(nonatomic, readwrite) int32_t width;

/**
 * Valid colorspace values are
 *   1 - grayscale
 *   2 - grayscale + alpha
 *   3 - RGB
 *   4 - RGBA
 *   5 - DIGITAL_YUV
 *   6 - BGRA
 **/
@property(nonatomic, readwrite) int32_t colorspace;

/**
 * Image data in encoded format.  All image formats supported by
 * image_codec::CoderUtil can be stored here.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *encodedImageString;

@end

#pragma mark - Summary_Audio

typedef GPB_ENUM(Summary_Audio_FieldNumber) {
  Summary_Audio_FieldNumber_SampleRate = 1,
  Summary_Audio_FieldNumber_NumChannels = 2,
  Summary_Audio_FieldNumber_LengthFrames = 3,
  Summary_Audio_FieldNumber_EncodedAudioString = 4,
  Summary_Audio_FieldNumber_ContentType = 5,
};

@interface Summary_Audio : GPBMessage

/** Sample rate of the audio in Hz. */
@property(nonatomic, readwrite) float sampleRate;

/** Number of channels of audio. */
@property(nonatomic, readwrite) int64_t numChannels;

/** Length of the audio in frames (samples per channel). */
@property(nonatomic, readwrite) int64_t lengthFrames;

/**
 * Encoded audio data and its associated RFC 2045 content type (e.g.
 * "audio/wav").
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSData *encodedAudioString;

@property(nonatomic, readwrite, copy, null_resettable) NSString *contentType;

@end

#pragma mark - Summary_Value

typedef GPB_ENUM(Summary_Value_FieldNumber) {
  Summary_Value_FieldNumber_Tag = 1,
  Summary_Value_FieldNumber_SimpleValue = 2,
  Summary_Value_FieldNumber_ObsoleteOldStyleHistogram = 3,
  Summary_Value_FieldNumber_Image = 4,
  Summary_Value_FieldNumber_Histo = 5,
  Summary_Value_FieldNumber_Audio = 6,
  Summary_Value_FieldNumber_NodeName = 7,
  Summary_Value_FieldNumber_Tensor = 8,
};

typedef GPB_ENUM(Summary_Value_Value_OneOfCase) {
  Summary_Value_Value_OneOfCase_GPBUnsetOneOfCase = 0,
  Summary_Value_Value_OneOfCase_SimpleValue = 2,
  Summary_Value_Value_OneOfCase_ObsoleteOldStyleHistogram = 3,
  Summary_Value_Value_OneOfCase_Image = 4,
  Summary_Value_Value_OneOfCase_Histo = 5,
  Summary_Value_Value_OneOfCase_Audio = 6,
  Summary_Value_Value_OneOfCase_Tensor = 8,
};

@interface Summary_Value : GPBMessage

/**
 * Name of the node that output this summary; in general, the name of a
 * TensorSummary node. If the node in question has multiple outputs, then
 * a ":\\d+" suffix will be appended, like "some_op:13".
 * Might not be set for legacy summaries (i.e. those not using the tensor
 * value field)
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeName;

/**
 * Tag name for the data.  Will only be used by legacy summaries
 * (ie. those not using the tensor value field)
 * For legacy summaries, will be used as the title of the graph
 * in the visualizer.
 *
 * Tag is usually "op_name:value_name", where "op_name" itself can have
 * structure to indicate grouping.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *tag;

/** Value associated with the tag. */
@property(nonatomic, readonly) Summary_Value_Value_OneOfCase valueOneOfCase;

@property(nonatomic, readwrite) float simpleValue;

@property(nonatomic, readwrite, copy, null_resettable) NSData *obsoleteOldStyleHistogram;

@property(nonatomic, readwrite, strong, null_resettable) Summary_Image *image;

@property(nonatomic, readwrite, strong, null_resettable) HistogramProto *histo;

@property(nonatomic, readwrite, strong, null_resettable) Summary_Audio *audio;

@property(nonatomic, readwrite, strong, null_resettable) TensorProto *tensor;

@end

/**
 * Clears whatever value was set for the oneof 'value'.
 **/
void Summary_Value_ClearValueOneOfCase(Summary_Value *message);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
