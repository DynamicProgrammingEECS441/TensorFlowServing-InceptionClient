// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/kernel_def.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/KernelDef.pbobjc.h"
 #import "tensorflow/core/framework/AttrValue.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - KernelDefRoot

@implementation KernelDefRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - KernelDefRoot_FileDescriptor

static GPBFileDescriptor *KernelDefRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - KernelDef

@implementation KernelDef

@dynamic op;
@dynamic deviceType;
@dynamic constraintArray, constraintArray_Count;
@dynamic hostMemoryArgArray, hostMemoryArgArray_Count;
@dynamic label;

typedef struct KernelDef__storage_ {
  uint32_t _has_storage_[1];
  NSString *op;
  NSString *deviceType;
  NSMutableArray *constraintArray;
  NSMutableArray *hostMemoryArgArray;
  NSString *label;
} KernelDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "op",
        .dataTypeSpecific.className = NULL,
        .number = KernelDef_FieldNumber_Op,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KernelDef__storage_, op),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deviceType",
        .dataTypeSpecific.className = NULL,
        .number = KernelDef_FieldNumber_DeviceType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KernelDef__storage_, deviceType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "constraintArray",
        .dataTypeSpecific.className = GPBStringifySymbol(KernelDef_AttrConstraint),
        .number = KernelDef_FieldNumber_ConstraintArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KernelDef__storage_, constraintArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hostMemoryArgArray",
        .dataTypeSpecific.className = NULL,
        .number = KernelDef_FieldNumber_HostMemoryArgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KernelDef__storage_, hostMemoryArgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = KernelDef_FieldNumber_Label,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KernelDef__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KernelDef class]
                                     rootClass:[KernelDefRoot class]
                                          file:KernelDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KernelDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KernelDef_AttrConstraint

@implementation KernelDef_AttrConstraint

@dynamic name;
@dynamic hasAllowedValues, allowedValues;

typedef struct KernelDef_AttrConstraint__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  AttrValue *allowedValues;
} KernelDef_AttrConstraint__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = KernelDef_AttrConstraint_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KernelDef_AttrConstraint__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "allowedValues",
        .dataTypeSpecific.className = GPBStringifySymbol(AttrValue),
        .number = KernelDef_AttrConstraint_FieldNumber_AllowedValues,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KernelDef_AttrConstraint__storage_, allowedValues),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KernelDef_AttrConstraint class]
                                     rootClass:[KernelDefRoot class]
                                          file:KernelDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KernelDef_AttrConstraint__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(KernelDef)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
