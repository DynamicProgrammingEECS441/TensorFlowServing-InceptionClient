// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/function.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/Function.pbobjc.h"
 #import "tensorflow/core/framework/AttrValue.pbobjc.h"
 #import "tensorflow/core/framework/NodeDef.pbobjc.h"
 #import "tensorflow/core/framework/OpDef.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - FunctionRoot

@implementation FunctionRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - FunctionRoot_FileDescriptor

static GPBFileDescriptor *FunctionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FunctionDefLibrary

@implementation FunctionDefLibrary

@dynamic functionArray, functionArray_Count;
@dynamic gradientArray, gradientArray_Count;

typedef struct FunctionDefLibrary__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *functionArray;
  NSMutableArray *gradientArray;
} FunctionDefLibrary__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "functionArray",
        .dataTypeSpecific.className = GPBStringifySymbol(FunctionDef),
        .number = FunctionDefLibrary_FieldNumber_FunctionArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FunctionDefLibrary__storage_, functionArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "gradientArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GradientDef),
        .number = FunctionDefLibrary_FieldNumber_GradientArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FunctionDefLibrary__storage_, gradientArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FunctionDefLibrary class]
                                     rootClass:[FunctionRoot class]
                                          file:FunctionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FunctionDefLibrary__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FunctionDef

@implementation FunctionDef

@dynamic hasSignature, signature;
@dynamic attr, attr_Count;
@dynamic nodeDefArray, nodeDefArray_Count;
@dynamic ret, ret_Count;

typedef struct FunctionDef__storage_ {
  uint32_t _has_storage_[1];
  OpDef *signature;
  NSMutableArray *nodeDefArray;
  NSMutableDictionary *ret;
  NSMutableDictionary *attr;
} FunctionDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "signature",
        .dataTypeSpecific.className = GPBStringifySymbol(OpDef),
        .number = FunctionDef_FieldNumber_Signature,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FunctionDef__storage_, signature),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "nodeDefArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NodeDef),
        .number = FunctionDef_FieldNumber_NodeDefArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FunctionDef__storage_, nodeDefArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "ret",
        .dataTypeSpecific.className = NULL,
        .number = FunctionDef_FieldNumber_Ret,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FunctionDef__storage_, ret),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attr",
        .dataTypeSpecific.className = GPBStringifySymbol(AttrValue),
        .number = FunctionDef_FieldNumber_Attr,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(FunctionDef__storage_, attr),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FunctionDef class]
                                     rootClass:[FunctionRoot class]
                                          file:FunctionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FunctionDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GradientDef

@implementation GradientDef

@dynamic functionName;
@dynamic gradientFunc;

typedef struct GradientDef__storage_ {
  uint32_t _has_storage_[1];
  NSString *functionName;
  NSString *gradientFunc;
} GradientDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "functionName",
        .dataTypeSpecific.className = NULL,
        .number = GradientDef_FieldNumber_FunctionName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GradientDef__storage_, functionName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gradientFunc",
        .dataTypeSpecific.className = NULL,
        .number = GradientDef_FieldNumber_GradientFunc,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GradientDef__storage_, gradientFunc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GradientDef class]
                                     rootClass:[FunctionRoot class]
                                          file:FunctionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GradientDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
