// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/step_stats.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AllocationDescription;
@class AllocatorMemoryUsed;
@class DeviceStepStats;
@class MemoryStats;
@class NodeExecStats;
@class NodeOutput;
@class TensorDescription;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - StepStatsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface StepStatsRoot : GPBRootObject
@end

#pragma mark - AllocatorMemoryUsed

typedef GPB_ENUM(AllocatorMemoryUsed_FieldNumber) {
  AllocatorMemoryUsed_FieldNumber_AllocatorName = 1,
  AllocatorMemoryUsed_FieldNumber_TotalBytes = 2,
  AllocatorMemoryUsed_FieldNumber_PeakBytes = 3,
  AllocatorMemoryUsed_FieldNumber_LiveBytes = 4,
};

@interface AllocatorMemoryUsed : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *allocatorName;

@property(nonatomic, readwrite) int64_t totalBytes;

@property(nonatomic, readwrite) int64_t peakBytes;

/** The bytes that are not deallocated. */
@property(nonatomic, readwrite) int64_t liveBytes;

@end

#pragma mark - NodeOutput

typedef GPB_ENUM(NodeOutput_FieldNumber) {
  NodeOutput_FieldNumber_Slot = 1,
  NodeOutput_FieldNumber_TensorDescription = 3,
};

/**
 * Output sizes recorded for a single execution of a graph node.
 **/
@interface NodeOutput : GPBMessage

@property(nonatomic, readwrite) int32_t slot;

@property(nonatomic, readwrite, strong, null_resettable) TensorDescription *tensorDescription;
/** Test to see if @c tensorDescription has been set. */
@property(nonatomic, readwrite) BOOL hasTensorDescription;

@end

#pragma mark - MemoryStats

typedef GPB_ENUM(MemoryStats_FieldNumber) {
  MemoryStats_FieldNumber_HostTempMemorySize = 1,
  MemoryStats_FieldNumber_DeviceTempMemorySize = 2,
  MemoryStats_FieldNumber_HostPersistentMemorySize = 3,
  MemoryStats_FieldNumber_DevicePersistentMemorySize = 4,
  MemoryStats_FieldNumber_HostPersistentTensorAllocIdsArray = 5,
  MemoryStats_FieldNumber_DevicePersistentTensorAllocIdsArray = 6,
};

/**
 * For memory tracking.
 **/
@interface MemoryStats : GPBMessage

@property(nonatomic, readwrite) int64_t hostTempMemorySize;

@property(nonatomic, readwrite) int64_t deviceTempMemorySize;

@property(nonatomic, readwrite) int64_t hostPersistentMemorySize;

@property(nonatomic, readwrite) int64_t devicePersistentMemorySize;

@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *hostPersistentTensorAllocIdsArray;
/** The number of items in @c hostPersistentTensorAllocIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hostPersistentTensorAllocIdsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *devicePersistentTensorAllocIdsArray;
/** The number of items in @c devicePersistentTensorAllocIdsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger devicePersistentTensorAllocIdsArray_Count;

@end

#pragma mark - NodeExecStats

typedef GPB_ENUM(NodeExecStats_FieldNumber) {
  NodeExecStats_FieldNumber_NodeName = 1,
  NodeExecStats_FieldNumber_AllStartMicros = 2,
  NodeExecStats_FieldNumber_OpStartRelMicros = 3,
  NodeExecStats_FieldNumber_OpEndRelMicros = 4,
  NodeExecStats_FieldNumber_AllEndRelMicros = 5,
  NodeExecStats_FieldNumber_MemoryArray = 6,
  NodeExecStats_FieldNumber_OutputArray = 7,
  NodeExecStats_FieldNumber_TimelineLabel = 8,
  NodeExecStats_FieldNumber_ScheduledMicros = 9,
  NodeExecStats_FieldNumber_ThreadId = 10,
  NodeExecStats_FieldNumber_ReferencedTensorArray = 11,
  NodeExecStats_FieldNumber_MemoryStats = 12,
};

/**
 * Time/size stats recorded for a single execution of a graph node.
 **/
@interface NodeExecStats : GPBMessage

/**
 * TODO(tucker): Use some more compact form of node identity than
 * the full string name.  Either all processes should agree on a
 * global id (cost_id?) for each node, or we should use a hash of
 * the name.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *nodeName;

@property(nonatomic, readwrite) int64_t allStartMicros;

@property(nonatomic, readwrite) int64_t opStartRelMicros;

@property(nonatomic, readwrite) int64_t opEndRelMicros;

@property(nonatomic, readwrite) int64_t allEndRelMicros;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<AllocatorMemoryUsed*> *memoryArray;
/** The number of items in @c memoryArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger memoryArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NodeOutput*> *outputArray;
/** The number of items in @c outputArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputArray_Count;

@property(nonatomic, readwrite, copy, null_resettable) NSString *timelineLabel;

@property(nonatomic, readwrite) int64_t scheduledMicros;

@property(nonatomic, readwrite) uint32_t threadId;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<AllocationDescription*> *referencedTensorArray;
/** The number of items in @c referencedTensorArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger referencedTensorArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) MemoryStats *memoryStats;
/** Test to see if @c memoryStats has been set. */
@property(nonatomic, readwrite) BOOL hasMemoryStats;

@end

#pragma mark - DeviceStepStats

typedef GPB_ENUM(DeviceStepStats_FieldNumber) {
  DeviceStepStats_FieldNumber_Device = 1,
  DeviceStepStats_FieldNumber_NodeStatsArray = 2,
};

@interface DeviceStepStats : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *device;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NodeExecStats*> *nodeStatsArray;
/** The number of items in @c nodeStatsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger nodeStatsArray_Count;

@end

#pragma mark - StepStats

typedef GPB_ENUM(StepStats_FieldNumber) {
  StepStats_FieldNumber_DevStatsArray = 1,
};

@interface StepStats : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DeviceStepStats*> *devStatsArray;
/** The number of items in @c devStatsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger devStatsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
