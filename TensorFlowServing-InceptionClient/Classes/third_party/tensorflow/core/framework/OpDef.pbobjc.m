// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/op_def.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/OpDef.pbobjc.h"
 #import "tensorflow/core/framework/AttrValue.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - OpDefRoot

@implementation OpDefRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OpDefRoot_FileDescriptor

static GPBFileDescriptor *OpDefRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - OpDef

@implementation OpDef

@dynamic name;
@dynamic inputArgArray, inputArgArray_Count;
@dynamic outputArgArray, outputArgArray_Count;
@dynamic attrArray, attrArray_Count;
@dynamic hasDeprecation, deprecation;
@dynamic summary;
@dynamic description_p;
@dynamic isCommutative;
@dynamic isAggregate;
@dynamic isStateful;
@dynamic allowsUninitializedInput;

typedef struct OpDef__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableArray *inputArgArray;
  NSMutableArray *outputArgArray;
  NSMutableArray *attrArray;
  NSString *summary;
  NSString *description_p;
  OpDeprecation *deprecation;
} OpDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OpDef__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "inputArgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OpDef_ArgDef),
        .number = OpDef_FieldNumber_InputArgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OpDef__storage_, inputArgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputArgArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OpDef_ArgDef),
        .number = OpDef_FieldNumber_OutputArgArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OpDef__storage_, outputArgArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "attrArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OpDef_AttrDef),
        .number = OpDef_FieldNumber_AttrArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OpDef__storage_, attrArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "summary",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_Summary,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OpDef__storage_, summary),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OpDef__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "deprecation",
        .dataTypeSpecific.className = GPBStringifySymbol(OpDeprecation),
        .number = OpDef_FieldNumber_Deprecation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OpDef__storage_, deprecation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isAggregate",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_IsAggregate,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isStateful",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_IsStateful,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isCommutative",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_IsCommutative,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "allowsUninitializedInput",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_FieldNumber_AllowsUninitializedInput,
        .hasIndex = 10,
        .offset = 11,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpDef class]
                                     rootClass:[OpDefRoot class]
                                          file:OpDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OpDef_ArgDef

@implementation OpDef_ArgDef

@dynamic name;
@dynamic description_p;
@dynamic type;
@dynamic typeAttr;
@dynamic numberAttr;
@dynamic typeListAttr;
@dynamic isRef;

typedef struct OpDef_ArgDef__storage_ {
  uint32_t _has_storage_[1];
  DataType type;
  NSString *name;
  NSString *description_p;
  NSString *typeAttr;
  NSString *numberAttr;
  NSString *typeListAttr;
} OpDef_ArgDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_ArgDef_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OpDef_ArgDef__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_ArgDef_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OpDef_ArgDef__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = OpDef_ArgDef_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OpDef_ArgDef__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "typeAttr",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_ArgDef_FieldNumber_TypeAttr,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OpDef_ArgDef__storage_, typeAttr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "numberAttr",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_ArgDef_FieldNumber_NumberAttr,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(OpDef_ArgDef__storage_, numberAttr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "typeListAttr",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_ArgDef_FieldNumber_TypeListAttr,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(OpDef_ArgDef__storage_, typeListAttr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isRef",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_ArgDef_FieldNumber_IsRef,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpDef_ArgDef class]
                                     rootClass:[OpDefRoot class]
                                          file:OpDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpDef_ArgDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(OpDef)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t OpDef_ArgDef_Type_RawValue(OpDef_ArgDef *message) {
  GPBDescriptor *descriptor = [OpDef_ArgDef descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OpDef_ArgDef_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetOpDef_ArgDef_Type_RawValue(OpDef_ArgDef *message, int32_t value) {
  GPBDescriptor *descriptor = [OpDef_ArgDef descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:OpDef_ArgDef_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - OpDef_AttrDef

@implementation OpDef_AttrDef

@dynamic name;
@dynamic type;
@dynamic hasDefaultValue, defaultValue;
@dynamic description_p;
@dynamic hasMinimum;
@dynamic minimum;
@dynamic hasAllowedValues, allowedValues;

typedef struct OpDef_AttrDef__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *type;
  AttrValue *defaultValue;
  NSString *description_p;
  AttrValue *allowedValues;
  int64_t minimum;
} OpDef_AttrDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_AttrDef_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OpDef_AttrDef__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_AttrDef_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OpDef_AttrDef__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "defaultValue",
        .dataTypeSpecific.className = GPBStringifySymbol(AttrValue),
        .number = OpDef_AttrDef_FieldNumber_DefaultValue,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(OpDef_AttrDef__storage_, defaultValue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_AttrDef_FieldNumber_Description_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(OpDef_AttrDef__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hasMinimum",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_AttrDef_FieldNumber_HasMinimum,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "minimum",
        .dataTypeSpecific.className = NULL,
        .number = OpDef_AttrDef_FieldNumber_Minimum,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(OpDef_AttrDef__storage_, minimum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "allowedValues",
        .dataTypeSpecific.className = GPBStringifySymbol(AttrValue),
        .number = OpDef_AttrDef_FieldNumber_AllowedValues,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(OpDef_AttrDef__storage_, allowedValues),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpDef_AttrDef class]
                                     rootClass:[OpDefRoot class]
                                          file:OpDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpDef_AttrDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(OpDef)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OpDeprecation

@implementation OpDeprecation

@dynamic version;
@dynamic explanation;

typedef struct OpDeprecation__storage_ {
  uint32_t _has_storage_[1];
  int32_t version;
  NSString *explanation;
} OpDeprecation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = OpDeprecation_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(OpDeprecation__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "explanation",
        .dataTypeSpecific.className = NULL,
        .number = OpDeprecation_FieldNumber_Explanation,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(OpDeprecation__storage_, explanation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpDeprecation class]
                                     rootClass:[OpDefRoot class]
                                          file:OpDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpDeprecation__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - OpList

@implementation OpList

@dynamic opArray, opArray_Count;

typedef struct OpList__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *opArray;
} OpList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "opArray",
        .dataTypeSpecific.className = GPBStringifySymbol(OpDef),
        .number = OpList_FieldNumber_OpArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(OpList__storage_, opArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[OpList class]
                                     rootClass:[OpDefRoot class]
                                          file:OpDefRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(OpList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
