// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/variable.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/Variable.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - VariableRoot

@implementation VariableRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - VariableRoot_FileDescriptor

static GPBFileDescriptor *VariableRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - VariableDef

@implementation VariableDef

@dynamic variableName;
@dynamic initializerName;
@dynamic snapshotName;
@dynamic hasSaveSliceInfoDef, saveSliceInfoDef;
@dynamic isResource;

typedef struct VariableDef__storage_ {
  uint32_t _has_storage_[1];
  NSString *variableName;
  NSString *initializerName;
  NSString *snapshotName;
  SaveSliceInfoDef *saveSliceInfoDef;
} VariableDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "variableName",
        .dataTypeSpecific.className = NULL,
        .number = VariableDef_FieldNumber_VariableName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VariableDef__storage_, variableName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "initializerName",
        .dataTypeSpecific.className = NULL,
        .number = VariableDef_FieldNumber_InitializerName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VariableDef__storage_, initializerName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "snapshotName",
        .dataTypeSpecific.className = NULL,
        .number = VariableDef_FieldNumber_SnapshotName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VariableDef__storage_, snapshotName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "saveSliceInfoDef",
        .dataTypeSpecific.className = GPBStringifySymbol(SaveSliceInfoDef),
        .number = VariableDef_FieldNumber_SaveSliceInfoDef,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VariableDef__storage_, saveSliceInfoDef),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isResource",
        .dataTypeSpecific.className = NULL,
        .number = VariableDef_FieldNumber_IsResource,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VariableDef class]
                                     rootClass:[VariableRoot class]
                                          file:VariableRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VariableDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SaveSliceInfoDef

@implementation SaveSliceInfoDef

@dynamic fullName;
@dynamic fullShapeArray, fullShapeArray_Count;
@dynamic varOffsetArray, varOffsetArray_Count;
@dynamic varShapeArray, varShapeArray_Count;

typedef struct SaveSliceInfoDef__storage_ {
  uint32_t _has_storage_[1];
  NSString *fullName;
  GPBInt64Array *fullShapeArray;
  GPBInt64Array *varOffsetArray;
  GPBInt64Array *varShapeArray;
} SaveSliceInfoDef__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fullName",
        .dataTypeSpecific.className = NULL,
        .number = SaveSliceInfoDef_FieldNumber_FullName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SaveSliceInfoDef__storage_, fullName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "fullShapeArray",
        .dataTypeSpecific.className = NULL,
        .number = SaveSliceInfoDef_FieldNumber_FullShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SaveSliceInfoDef__storage_, fullShapeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "varOffsetArray",
        .dataTypeSpecific.className = NULL,
        .number = SaveSliceInfoDef_FieldNumber_VarOffsetArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SaveSliceInfoDef__storage_, varOffsetArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "varShapeArray",
        .dataTypeSpecific.className = NULL,
        .number = SaveSliceInfoDef_FieldNumber_VarShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SaveSliceInfoDef__storage_, varShapeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SaveSliceInfoDef class]
                                     rootClass:[VariableRoot class]
                                          file:VariableRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SaveSliceInfoDef__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
