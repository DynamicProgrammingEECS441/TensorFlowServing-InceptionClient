// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/kernel_def.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AttrValue;
@class KernelDef_AttrConstraint;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - KernelDefRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface KernelDefRoot : GPBRootObject
@end

#pragma mark - KernelDef

typedef GPB_ENUM(KernelDef_FieldNumber) {
  KernelDef_FieldNumber_Op = 1,
  KernelDef_FieldNumber_DeviceType = 2,
  KernelDef_FieldNumber_ConstraintArray = 3,
  KernelDef_FieldNumber_HostMemoryArgArray = 4,
  KernelDef_FieldNumber_Label = 5,
};

@interface KernelDef : GPBMessage

/** Must match the name of an Op. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *op;

/** Type of device this kernel runs on. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceType;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<KernelDef_AttrConstraint*> *constraintArray;
/** The number of items in @c constraintArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger constraintArray_Count;

/**
 * Names of the Op's input_/output_args that reside in host memory
 * instead of device memory.
 **/
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<NSString*> *hostMemoryArgArray;
/** The number of items in @c hostMemoryArgArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger hostMemoryArgArray_Count;

/**
 * This allows experimental kernels to be registered for an op that
 * won't be used unless the user specifies a "_kernel" attr with
 * value matching this.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *label;

@end

#pragma mark - KernelDef_AttrConstraint

typedef GPB_ENUM(KernelDef_AttrConstraint_FieldNumber) {
  KernelDef_AttrConstraint_FieldNumber_Name = 1,
  KernelDef_AttrConstraint_FieldNumber_AllowedValues = 2,
};

@interface KernelDef_AttrConstraint : GPBMessage

/** Name of an attr from the Op. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * A list of values that this kernel supports for this attr.
 * Like OpDef.AttrDef.allowed_values, except for kernels instead of Ops.
 **/
@property(nonatomic, readwrite, strong, null_resettable) AttrValue *allowedValues;
/** Test to see if @c allowedValues has been set. */
@property(nonatomic, readwrite) BOOL hasAllowedValues;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
