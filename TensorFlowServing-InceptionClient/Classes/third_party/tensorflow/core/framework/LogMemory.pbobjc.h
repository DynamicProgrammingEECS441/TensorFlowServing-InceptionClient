// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/log_memory.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class TensorDescription;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - LogMemoryRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface LogMemoryRoot : GPBRootObject
@end

#pragma mark - MemoryLogStep

typedef GPB_ENUM(MemoryLogStep_FieldNumber) {
  MemoryLogStep_FieldNumber_StepId = 1,
  MemoryLogStep_FieldNumber_Handle = 2,
};

@interface MemoryLogStep : GPBMessage

/** Process-unique step id. */
@property(nonatomic, readwrite) int64_t stepId;

/** Handle describing the feeds and fetches of the step. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *handle;

@end

#pragma mark - MemoryLogTensorAllocation

typedef GPB_ENUM(MemoryLogTensorAllocation_FieldNumber) {
  MemoryLogTensorAllocation_FieldNumber_StepId = 1,
  MemoryLogTensorAllocation_FieldNumber_KernelName = 2,
  MemoryLogTensorAllocation_FieldNumber_Tensor = 3,
};

@interface MemoryLogTensorAllocation : GPBMessage

/** Process-unique step id. */
@property(nonatomic, readwrite) int64_t stepId;

/**
 * Name of the kernel making the allocation as set in GraphDef,
 * e.g., "affine2/weights/Assign".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *kernelName;

/** Allocated tensor details. */
@property(nonatomic, readwrite, strong, null_resettable) TensorDescription *tensor;
/** Test to see if @c tensor has been set. */
@property(nonatomic, readwrite) BOOL hasTensor;

@end

#pragma mark - MemoryLogTensorDeallocation

typedef GPB_ENUM(MemoryLogTensorDeallocation_FieldNumber) {
  MemoryLogTensorDeallocation_FieldNumber_AllocationId = 1,
  MemoryLogTensorDeallocation_FieldNumber_AllocatorName = 2,
};

@interface MemoryLogTensorDeallocation : GPBMessage

/**
 * Id of the tensor buffer being deallocated, used to match to a
 * corresponding allocation.
 **/
@property(nonatomic, readwrite) int64_t allocationId;

/** Name of the allocator used. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *allocatorName;

@end

#pragma mark - MemoryLogTensorOutput

typedef GPB_ENUM(MemoryLogTensorOutput_FieldNumber) {
  MemoryLogTensorOutput_FieldNumber_StepId = 1,
  MemoryLogTensorOutput_FieldNumber_KernelName = 2,
  MemoryLogTensorOutput_FieldNumber_Index = 3,
  MemoryLogTensorOutput_FieldNumber_Tensor = 4,
};

@interface MemoryLogTensorOutput : GPBMessage

/** Process-unique step id. */
@property(nonatomic, readwrite) int64_t stepId;

/**
 * Name of the kernel producing an output as set in GraphDef, e.g.,
 * "affine2/weights/Assign".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *kernelName;

/** Index of the output being set. */
@property(nonatomic, readwrite) int32_t index;

/** Output tensor details. */
@property(nonatomic, readwrite, strong, null_resettable) TensorDescription *tensor;
/** Test to see if @c tensor has been set. */
@property(nonatomic, readwrite) BOOL hasTensor;

@end

#pragma mark - MemoryLogRawAllocation

typedef GPB_ENUM(MemoryLogRawAllocation_FieldNumber) {
  MemoryLogRawAllocation_FieldNumber_StepId = 1,
  MemoryLogRawAllocation_FieldNumber_Operation = 2,
  MemoryLogRawAllocation_FieldNumber_NumBytes = 3,
  MemoryLogRawAllocation_FieldNumber_Ptr = 4,
  MemoryLogRawAllocation_FieldNumber_AllocationId = 5,
  MemoryLogRawAllocation_FieldNumber_AllocatorName = 6,
};

@interface MemoryLogRawAllocation : GPBMessage

/** Process-unique step id. */
@property(nonatomic, readwrite) int64_t stepId;

/** Name of the operation making the allocation. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *operation;

/** Number of bytes in the allocation. */
@property(nonatomic, readwrite) int64_t numBytes;

/** Address of the allocation. */
@property(nonatomic, readwrite) uint64_t ptr;

/**
 * Id of the tensor buffer being allocated, used to match to a
 * corresponding deallocation.
 **/
@property(nonatomic, readwrite) int64_t allocationId;

/** Name of the allocator used. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *allocatorName;

@end

#pragma mark - MemoryLogRawDeallocation

typedef GPB_ENUM(MemoryLogRawDeallocation_FieldNumber) {
  MemoryLogRawDeallocation_FieldNumber_StepId = 1,
  MemoryLogRawDeallocation_FieldNumber_Operation = 2,
  MemoryLogRawDeallocation_FieldNumber_AllocationId = 3,
  MemoryLogRawDeallocation_FieldNumber_AllocatorName = 4,
  MemoryLogRawDeallocation_FieldNumber_Deferred = 5,
};

@interface MemoryLogRawDeallocation : GPBMessage

/** Process-unique step id. */
@property(nonatomic, readwrite) int64_t stepId;

/** Name of the operation making the deallocation. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *operation;

/**
 * Id of the tensor buffer being deallocated, used to match to a
 * corresponding allocation.
 **/
@property(nonatomic, readwrite) int64_t allocationId;

/** Name of the allocator used. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *allocatorName;

/**
 * True if the deallocation is queued and will be performed later,
 * e.g. for GPU lazy freeing of buffers.
 **/
@property(nonatomic, readwrite) BOOL deferred;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
