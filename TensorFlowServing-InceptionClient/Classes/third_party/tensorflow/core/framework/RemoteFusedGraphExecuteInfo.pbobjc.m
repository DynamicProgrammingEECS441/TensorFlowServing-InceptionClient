// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/remote_fused_graph_execute_info.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/RemoteFusedGraphExecuteInfo.pbobjc.h"
 #import "tensorflow/core/framework/Graph.pbobjc.h"
 #import "tensorflow/core/framework/TensorShape.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - RemoteFusedGraphExecuteInfoRoot

@implementation RemoteFusedGraphExecuteInfoRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RemoteFusedGraphExecuteInfoRoot_FileDescriptor

static GPBFileDescriptor *RemoteFusedGraphExecuteInfoRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - RemoteFusedGraphExecuteInfo

@implementation RemoteFusedGraphExecuteInfo

@dynamic hasRemoteGraph, remoteGraph;
@dynamic graphInputNodeNameArray, graphInputNodeNameArray_Count;
@dynamic graphOutputNodeNameArray, graphOutputNodeNameArray_Count;
@dynamic executorName;
@dynamic serializedExecutorParameters;
@dynamic defaultGraphInputTensorShapeArray, defaultGraphInputTensorShapeArray_Count;
@dynamic defaultGraphOutputTensorShapeArray, defaultGraphOutputTensorShapeArray_Count;

typedef struct RemoteFusedGraphExecuteInfo__storage_ {
  uint32_t _has_storage_[1];
  GraphDef *remoteGraph;
  NSMutableArray *graphInputNodeNameArray;
  NSMutableArray *graphOutputNodeNameArray;
  NSString *executorName;
  NSData *serializedExecutorParameters;
  NSMutableArray *defaultGraphInputTensorShapeArray;
  NSMutableArray *defaultGraphOutputTensorShapeArray;
} RemoteFusedGraphExecuteInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remoteGraph",
        .dataTypeSpecific.className = GPBStringifySymbol(GraphDef),
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_RemoteGraph,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, remoteGraph),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "graphInputNodeNameArray",
        .dataTypeSpecific.className = NULL,
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_GraphInputNodeNameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, graphInputNodeNameArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "graphOutputNodeNameArray",
        .dataTypeSpecific.className = NULL,
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_GraphOutputNodeNameArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, graphOutputNodeNameArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "executorName",
        .dataTypeSpecific.className = NULL,
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_ExecutorName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, executorName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "serializedExecutorParameters",
        .dataTypeSpecific.className = NULL,
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_SerializedExecutorParameters,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, serializedExecutorParameters),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "defaultGraphInputTensorShapeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto),
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_DefaultGraphInputTensorShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, defaultGraphInputTensorShapeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "defaultGraphOutputTensorShapeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto),
        .number = RemoteFusedGraphExecuteInfo_FieldNumber_DefaultGraphOutputTensorShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo__storage_, defaultGraphOutputTensorShapeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RemoteFusedGraphExecuteInfo class]
                                     rootClass:[RemoteFusedGraphExecuteInfoRoot class]
                                          file:RemoteFusedGraphExecuteInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RemoteFusedGraphExecuteInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RemoteFusedGraphExecuteInfo_TensorShapeTypeProto

@implementation RemoteFusedGraphExecuteInfo_TensorShapeTypeProto

@dynamic dtype;
@dynamic hasShape, shape;

typedef struct RemoteFusedGraphExecuteInfo_TensorShapeTypeProto__storage_ {
  uint32_t _has_storage_[1];
  DataType dtype;
  TensorShapeProto *shape;
} RemoteFusedGraphExecuteInfo_TensorShapeTypeProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dtype",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_FieldNumber_Dtype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_FieldNumber_Shape,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RemoteFusedGraphExecuteInfo_TensorShapeTypeProto class]
                                     rootClass:[RemoteFusedGraphExecuteInfoRoot class]
                                          file:RemoteFusedGraphExecuteInfoRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(RemoteFusedGraphExecuteInfo)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_Dtype_RawValue(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto *message) {
  GPBDescriptor *descriptor = [RemoteFusedGraphExecuteInfo_TensorShapeTypeProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_FieldNumber_Dtype];
  return GPBGetMessageInt32Field(message, field);
}

void SetRemoteFusedGraphExecuteInfo_TensorShapeTypeProto_Dtype_RawValue(RemoteFusedGraphExecuteInfo_TensorShapeTypeProto *message, int32_t value) {
  GPBDescriptor *descriptor = [RemoteFusedGraphExecuteInfo_TensorShapeTypeProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:RemoteFusedGraphExecuteInfo_TensorShapeTypeProto_FieldNumber_Dtype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
