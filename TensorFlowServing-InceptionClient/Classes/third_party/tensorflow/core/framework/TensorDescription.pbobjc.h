// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/tensor_description.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AllocationDescription;
@class TensorShapeProto;
GPB_ENUM_FWD_DECLARE(DataType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - TensorDescriptionRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface TensorDescriptionRoot : GPBRootObject
@end

#pragma mark - TensorDescription

typedef GPB_ENUM(TensorDescription_FieldNumber) {
  TensorDescription_FieldNumber_Dtype = 1,
  TensorDescription_FieldNumber_Shape = 2,
  TensorDescription_FieldNumber_AllocationDescription = 4,
};

@interface TensorDescription : GPBMessage

/** Data type of tensor elements */
@property(nonatomic, readwrite) enum DataType dtype;

/** Shape of the tensor. */
@property(nonatomic, readwrite, strong, null_resettable) TensorShapeProto *shape;
/** Test to see if @c shape has been set. */
@property(nonatomic, readwrite) BOOL hasShape;

/** Information about the size and allocator used for the data */
@property(nonatomic, readwrite, strong, null_resettable) AllocationDescription *allocationDescription;
/** Test to see if @c allocationDescription has been set. */
@property(nonatomic, readwrite) BOOL hasAllocationDescription;

@end

/**
 * Fetches the raw value of a @c TensorDescription's @c dtype property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t TensorDescription_Dtype_RawValue(TensorDescription *message);
/**
 * Sets the raw value of an @c TensorDescription's @c dtype property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetTensorDescription_Dtype_RawValue(TensorDescription *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
