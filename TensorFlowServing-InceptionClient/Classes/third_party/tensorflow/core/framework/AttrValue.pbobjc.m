// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/attr_value.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/AttrValue.pbobjc.h"
 #import "tensorflow/core/framework/Tensor.pbobjc.h"
 #import "tensorflow/core/framework/TensorShape.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - AttrValueRoot

@implementation AttrValueRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AttrValueRoot_FileDescriptor

static GPBFileDescriptor *AttrValueRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AttrValue

@implementation AttrValue

@dynamic valueOneOfCase;
@dynamic s;
@dynamic i;
@dynamic f;
@dynamic b;
@dynamic type;
@dynamic shape;
@dynamic tensor;
@dynamic list;
@dynamic func;
@dynamic placeholder;

typedef struct AttrValue__storage_ {
  uint32_t _has_storage_[2];
  float f;
  DataType type;
  AttrValue_ListValue *list;
  NSData *s;
  TensorShapeProto *shape;
  TensorProto *tensor;
  NSString *placeholder;
  NameAttrList *func;
  int64_t i;
} AttrValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "list",
        .dataTypeSpecific.className = GPBStringifySymbol(AttrValue_ListValue),
        .number = AttrValue_FieldNumber_List,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, list),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "s",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_FieldNumber_S,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, s),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "i",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_FieldNumber_I,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, i),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "f",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_FieldNumber_F,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, f),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "b",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_FieldNumber_B,
        .hasIndex = -1,
        .offset = 0,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = AttrValue_FieldNumber_Type,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = AttrValue_FieldNumber_Shape,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tensor",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorProto),
        .number = AttrValue_FieldNumber_Tensor,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, tensor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "placeholder",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_FieldNumber_Placeholder,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, placeholder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "func",
        .dataTypeSpecific.className = GPBStringifySymbol(NameAttrList),
        .number = AttrValue_FieldNumber_Func,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AttrValue__storage_, func),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttrValue class]
                                     rootClass:[AttrValueRoot class]
                                          file:AttrValueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttrValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    static const char *oneofs[] = {
      "value",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AttrValue_Type_RawValue(AttrValue *message) {
  GPBDescriptor *descriptor = [AttrValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AttrValue_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAttrValue_Type_RawValue(AttrValue *message, int32_t value) {
  GPBDescriptor *descriptor = [AttrValue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AttrValue_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

void AttrValue_ClearValueOneOfCase(AttrValue *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - AttrValue_ListValue

@implementation AttrValue_ListValue

@dynamic sArray, sArray_Count;
@dynamic iArray, iArray_Count;
@dynamic fArray, fArray_Count;
@dynamic bArray, bArray_Count;
@dynamic typeArray, typeArray_Count;
@dynamic shapeArray, shapeArray_Count;
@dynamic tensorArray, tensorArray_Count;
@dynamic funcArray, funcArray_Count;

typedef struct AttrValue_ListValue__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *sArray;
  GPBInt64Array *iArray;
  GPBFloatArray *fArray;
  GPBBoolArray *bArray;
  GPBEnumArray *typeArray;
  NSMutableArray *shapeArray;
  NSMutableArray *tensorArray;
  NSMutableArray *funcArray;
} AttrValue_ListValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sArray",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_ListValue_FieldNumber_SArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, sArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "iArray",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_ListValue_FieldNumber_IArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, iArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "fArray",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_ListValue_FieldNumber_FArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, fArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "bArray",
        .dataTypeSpecific.className = NULL,
        .number = AttrValue_ListValue_FieldNumber_BArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, bArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "typeArray",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = AttrValue_ListValue_FieldNumber_TypeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, typeArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shapeArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = AttrValue_ListValue_FieldNumber_ShapeArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, shapeArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tensorArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorProto),
        .number = AttrValue_ListValue_FieldNumber_TensorArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, tensorArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "funcArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NameAttrList),
        .number = AttrValue_ListValue_FieldNumber_FuncArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AttrValue_ListValue__storage_, funcArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AttrValue_ListValue class]
                                     rootClass:[AttrValueRoot class]
                                          file:AttrValueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AttrValue_ListValue__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    [localDescriptor setupContainingMessageClassName:GPBStringifySymbol(AttrValue)];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NameAttrList

@implementation NameAttrList

@dynamic name;
@dynamic attr, attr_Count;

typedef struct NameAttrList__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSMutableDictionary *attr;
} NameAttrList__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = NameAttrList_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NameAttrList__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "attr",
        .dataTypeSpecific.className = GPBStringifySymbol(AttrValue),
        .number = NameAttrList_FieldNumber_Attr,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NameAttrList__storage_, attr),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NameAttrList class]
                                     rootClass:[AttrValueRoot class]
                                          file:AttrValueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NameAttrList__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
