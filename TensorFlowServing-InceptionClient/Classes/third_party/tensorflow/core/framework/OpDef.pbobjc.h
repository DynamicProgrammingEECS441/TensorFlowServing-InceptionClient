// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/op_def.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30002
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30002 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class AttrValue;
@class OpDef;
@class OpDef_ArgDef;
@class OpDef_AttrDef;
@class OpDeprecation;
GPB_ENUM_FWD_DECLARE(DataType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - OpDefRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
@interface OpDefRoot : GPBRootObject
@end

#pragma mark - OpDef

typedef GPB_ENUM(OpDef_FieldNumber) {
  OpDef_FieldNumber_Name = 1,
  OpDef_FieldNumber_InputArgArray = 2,
  OpDef_FieldNumber_OutputArgArray = 3,
  OpDef_FieldNumber_AttrArray = 4,
  OpDef_FieldNumber_Summary = 5,
  OpDef_FieldNumber_Description_p = 6,
  OpDef_FieldNumber_Deprecation = 8,
  OpDef_FieldNumber_IsAggregate = 16,
  OpDef_FieldNumber_IsStateful = 17,
  OpDef_FieldNumber_IsCommutative = 18,
  OpDef_FieldNumber_AllowsUninitializedInput = 19,
};

/**
 * Defines an operation. A NodeDef in a GraphDef specifies an Op by
 * using the "op" field which should match the name of a OpDef.
 **/
@interface OpDef : GPBMessage

/**
 * Op names starting with an underscore are reserved for internal use.
 * Names should be CamelCase and match the regexp "[A-Z][a-zA-Z0-9_]*".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Description of the input(s). */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<OpDef_ArgDef*> *inputArgArray;
/** The number of items in @c inputArgArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger inputArgArray_Count;

/** Description of the output(s). */
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<OpDef_ArgDef*> *outputArgArray;
/** The number of items in @c outputArgArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger outputArgArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<OpDef_AttrDef*> *attrArray;
/** The number of items in @c attrArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger attrArray_Count;

/** Optional deprecation based on GraphDef versions. */
@property(nonatomic, readwrite, strong, null_resettable) OpDeprecation *deprecation;
/** Test to see if @c deprecation has been set. */
@property(nonatomic, readwrite) BOOL hasDeprecation;

/** One-line human-readable description of what the Op does. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *summary;

/** Additional, longer human-readable description of what the Op does. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/** True if the operation is commutative ("op(a,b) == op(b,a)" for all inputs) */
@property(nonatomic, readwrite) BOOL isCommutative;

/**
 * If is_aggregate is true, then this operation accepts N >= 2
 * inputs and produces 1 output all of the same type.  Should be
 * associative and commutative, and produce output with the same
 * shape as the input.  The optimizer may replace an aggregate op
 * taking input from multiple devices with a tree of aggregate ops
 * that aggregate locally within each device (and possibly within
 * groups of nearby devices) before communicating.
 * TODO(josh11b): Implement that optimization.
 **/
@property(nonatomic, readwrite) BOOL isAggregate;

/**
 * By default Ops may be moved between devices.  Stateful ops should
 * either not be moved, or should only be moved if that state can also
 * be moved (e.g. via some sort of save / restore).
 * Stateful ops are guaranteed to never be optimized away by Common
 * Subexpression Elimination (CSE).
 **/
@property(nonatomic, readwrite) BOOL isStateful;

/**
 * By default, all inputs to an Op must be initialized Tensors.  Ops
 * that may initialize tensors for the first time should set this
 * field to true, to allow the Op to take an uninitialized Tensor as
 * input.
 **/
@property(nonatomic, readwrite) BOOL allowsUninitializedInput;

@end

#pragma mark - OpDef_ArgDef

typedef GPB_ENUM(OpDef_ArgDef_FieldNumber) {
  OpDef_ArgDef_FieldNumber_Name = 1,
  OpDef_ArgDef_FieldNumber_Description_p = 2,
  OpDef_ArgDef_FieldNumber_Type = 3,
  OpDef_ArgDef_FieldNumber_TypeAttr = 4,
  OpDef_ArgDef_FieldNumber_NumberAttr = 5,
  OpDef_ArgDef_FieldNumber_TypeListAttr = 6,
  OpDef_ArgDef_FieldNumber_IsRef = 16,
};

/**
 * For describing inputs and outputs.
 **/
@interface OpDef_ArgDef : GPBMessage

/** Name for the input/output.  Should match the regexp "[a-z][a-z0-9_]*". */
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/** Human readable description. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * Describes the type of one or more tensors that are accepted/produced
 * by this input/output arg.  The only legal combinations are:
 * * For a single tensor: either the "type" field is set or the
 *   "type_attr" field is set to the name of an attr with type "type".
 * * For a sequence of tensors with the same type: the "number_attr"
 *   field will be set to the name of an attr with type "int", and
 *   either the "type" or "type_attr" field will be set as for
 *   single tensors.
 * * For a sequence of tensors, the "type_list_attr" field will be set
 *   to the name of an attr with type "list(type)".
 **/
@property(nonatomic, readwrite) enum DataType type;

/** if specified, attr must have type "type" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *typeAttr;

/** if specified, attr must have type "int" */
@property(nonatomic, readwrite, copy, null_resettable) NSString *numberAttr;

/**
 * If specified, attr must have type "list(type)", and none of
 * type, type_attr, and number_attr may be specified.
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *typeListAttr;

/**
 * For inputs: if true, the inputs are required to be refs.
 *   By default, inputs can be either refs or non-refs.
 * For outputs: if true, outputs are refs, otherwise they are not.
 **/
@property(nonatomic, readwrite) BOOL isRef;

@end

/**
 * Fetches the raw value of a @c OpDef_ArgDef's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t OpDef_ArgDef_Type_RawValue(OpDef_ArgDef *message);
/**
 * Sets the raw value of an @c OpDef_ArgDef's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetOpDef_ArgDef_Type_RawValue(OpDef_ArgDef *message, int32_t value);

#pragma mark - OpDef_AttrDef

typedef GPB_ENUM(OpDef_AttrDef_FieldNumber) {
  OpDef_AttrDef_FieldNumber_Name = 1,
  OpDef_AttrDef_FieldNumber_Type = 2,
  OpDef_AttrDef_FieldNumber_DefaultValue = 3,
  OpDef_AttrDef_FieldNumber_Description_p = 4,
  OpDef_AttrDef_FieldNumber_HasMinimum = 5,
  OpDef_AttrDef_FieldNumber_Minimum = 6,
  OpDef_AttrDef_FieldNumber_AllowedValues = 7,
};

/**
 * Description of the graph-construction-time configuration of this
 * Op.  That is to say, this describes the attr fields that will
 * be specified in the NodeDef.
 **/
@interface OpDef_AttrDef : GPBMessage

/**
 * A descriptive name for the argument.  May be used, e.g. by the
 * Python client, as a keyword argument name, and so should match
 * the regexp "[a-z][a-z0-9_]+".
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/**
 * One of the type names from attr_value.proto ("string", "list(string)",
 * "int", etc.).
 **/
@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

/**
 * A reasonable default for this attribute if the user does not supply
 * a value.  If not specified, the user must supply a value.
 **/
@property(nonatomic, readwrite, strong, null_resettable) AttrValue *defaultValue;
/** Test to see if @c defaultValue has been set. */
@property(nonatomic, readwrite) BOOL hasDefaultValue;

/** Human-readable description. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/**
 * For type == "int", this is a minimum value.  For "list(___)"
 * types, this is the minimum length.
 **/
@property(nonatomic, readwrite) BOOL hasMinimum;

@property(nonatomic, readwrite) int64_t minimum;

/**
 * The set of allowed values.  Has type that is the "list" version
 * of the "type" field above (uses the "list" field of AttrValue).
 * If type == "type" or "list(type)" above, then the "type" field
 * of "allowed_values.list" has the set of allowed DataTypes.
 * If type == "string" or "list(string)", then the "s" field of
 * "allowed_values.list" has the set of allowed strings.
 **/
@property(nonatomic, readwrite, strong, null_resettable) AttrValue *allowedValues;
/** Test to see if @c allowedValues has been set. */
@property(nonatomic, readwrite) BOOL hasAllowedValues;

@end

#pragma mark - OpDeprecation

typedef GPB_ENUM(OpDeprecation_FieldNumber) {
  OpDeprecation_FieldNumber_Version = 1,
  OpDeprecation_FieldNumber_Explanation = 2,
};

/**
 * Information about version-dependent deprecation of an op
 **/
@interface OpDeprecation : GPBMessage

/** First GraphDef version at which the op is disallowed. */
@property(nonatomic, readwrite) int32_t version;

/** Explanation of why it was deprecated and what to use instead. */
@property(nonatomic, readwrite, copy, null_resettable) NSString *explanation;

@end

#pragma mark - OpList

typedef GPB_ENUM(OpList_FieldNumber) {
  OpList_FieldNumber_OpArray = 1,
};

/**
 * A collection of OpDefs
 **/
@interface OpList : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<OpDef*> *opArray;
/** The number of items in @c opArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger opArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
