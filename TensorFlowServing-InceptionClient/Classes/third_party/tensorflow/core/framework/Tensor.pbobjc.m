// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/tensor.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/framework/Tensor.pbobjc.h"
 #import "tensorflow/core/framework/ResourceHandle.pbobjc.h"
 #import "tensorflow/core/framework/TensorShape.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TensorRoot

@implementation TensorRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TensorRoot_FileDescriptor

static GPBFileDescriptor *TensorRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TensorProto

@implementation TensorProto

@dynamic dtype;
@dynamic hasTensorShape, tensorShape;
@dynamic versionNumber;
@dynamic tensorContent;
@dynamic halfValArray, halfValArray_Count;
@dynamic floatValArray, floatValArray_Count;
@dynamic doubleValArray, doubleValArray_Count;
@dynamic intValArray, intValArray_Count;
@dynamic stringValArray, stringValArray_Count;
@dynamic scomplexValArray, scomplexValArray_Count;
@dynamic int64ValArray, int64ValArray_Count;
@dynamic boolValArray, boolValArray_Count;
@dynamic dcomplexValArray, dcomplexValArray_Count;
@dynamic resourceHandleValArray, resourceHandleValArray_Count;

typedef struct TensorProto__storage_ {
  uint32_t _has_storage_[1];
  DataType dtype;
  int32_t versionNumber;
  TensorShapeProto *tensorShape;
  NSData *tensorContent;
  GPBFloatArray *floatValArray;
  GPBDoubleArray *doubleValArray;
  GPBInt32Array *intValArray;
  NSMutableArray *stringValArray;
  GPBFloatArray *scomplexValArray;
  GPBInt64Array *int64ValArray;
  GPBBoolArray *boolValArray;
  GPBDoubleArray *dcomplexValArray;
  GPBInt32Array *halfValArray;
  NSMutableArray *resourceHandleValArray;
} TensorProto__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dtype",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = TensorProto_FieldNumber_Dtype,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TensorProto__storage_, dtype),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tensorShape",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = TensorProto_FieldNumber_TensorShape,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TensorProto__storage_, tensorShape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "versionNumber",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_VersionNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TensorProto__storage_, versionNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "tensorContent",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_TensorContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TensorProto__storage_, tensorContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "floatValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_FloatValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, floatValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "doubleValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_DoubleValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, doubleValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "intValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_IntValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, intValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "stringValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_StringValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, stringValArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "scomplexValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_ScomplexValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, scomplexValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeFloat,
      },
      {
        .name = "int64ValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_Int64ValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, int64ValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boolValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_BoolValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, boolValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "dcomplexValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_DcomplexValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, dcomplexValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "halfValArray",
        .dataTypeSpecific.className = NULL,
        .number = TensorProto_FieldNumber_HalfValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, halfValArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resourceHandleValArray",
        .dataTypeSpecific.className = GPBStringifySymbol(ResourceHandle),
        .number = TensorProto_FieldNumber_ResourceHandleValArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TensorProto__storage_, resourceHandleValArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TensorProto class]
                                     rootClass:[TensorRoot class]
                                          file:TensorRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TensorProto__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TensorProto_Dtype_RawValue(TensorProto *message) {
  GPBDescriptor *descriptor = [TensorProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TensorProto_FieldNumber_Dtype];
  return GPBGetMessageInt32Field(message, field);
}

void SetTensorProto_Dtype_RawValue(TensorProto *message, int32_t value) {
  GPBDescriptor *descriptor = [TensorProto descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TensorProto_FieldNumber_Dtype];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
