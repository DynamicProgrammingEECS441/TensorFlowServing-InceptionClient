// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/saved_tensor_slice.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "tensorflow/core/util/SavedTensorSlice.pbobjc.h"
 #import "tensorflow/core/framework/TensorShape.pbobjc.h"
 #import "tensorflow/core/framework/TensorSlice.pbobjc.h"
 #import "tensorflow/core/framework/Tensor.pbobjc.h"
 #import "tensorflow/core/framework/Types.pbobjc.h"
 #import "tensorflow/core/framework/Versions.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - SavedTensorSliceRoot

@implementation SavedTensorSliceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - SavedTensorSliceRoot_FileDescriptor

static GPBFileDescriptor *SavedTensorSliceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"tensorflow"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - SavedSliceMeta

@implementation SavedSliceMeta

@dynamic name;
@dynamic hasShape, shape;
@dynamic type;
@dynamic sliceArray, sliceArray_Count;

typedef struct SavedSliceMeta__storage_ {
  uint32_t _has_storage_[1];
  DataType type;
  NSString *name;
  TensorShapeProto *shape;
  NSMutableArray *sliceArray;
} SavedSliceMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SavedSliceMeta_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SavedSliceMeta__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shape",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorShapeProto),
        .number = SavedSliceMeta_FieldNumber_Shape,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SavedSliceMeta__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = DataType_EnumDescriptor,
        .number = SavedSliceMeta_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SavedSliceMeta__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "sliceArray",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorSliceProto),
        .number = SavedSliceMeta_FieldNumber_SliceArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SavedSliceMeta__storage_, sliceArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SavedSliceMeta class]
                                     rootClass:[SavedTensorSliceRoot class]
                                          file:SavedTensorSliceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SavedSliceMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SavedSliceMeta_Type_RawValue(SavedSliceMeta *message) {
  GPBDescriptor *descriptor = [SavedSliceMeta descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SavedSliceMeta_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetSavedSliceMeta_Type_RawValue(SavedSliceMeta *message, int32_t value) {
  GPBDescriptor *descriptor = [SavedSliceMeta descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SavedSliceMeta_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - SavedTensorSliceMeta

@implementation SavedTensorSliceMeta

@dynamic tensorArray, tensorArray_Count;
@dynamic hasVersions, versions;

typedef struct SavedTensorSliceMeta__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *tensorArray;
  VersionDef *versions;
} SavedTensorSliceMeta__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tensorArray",
        .dataTypeSpecific.className = GPBStringifySymbol(SavedSliceMeta),
        .number = SavedTensorSliceMeta_FieldNumber_TensorArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SavedTensorSliceMeta__storage_, tensorArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "versions",
        .dataTypeSpecific.className = GPBStringifySymbol(VersionDef),
        .number = SavedTensorSliceMeta_FieldNumber_Versions,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SavedTensorSliceMeta__storage_, versions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SavedTensorSliceMeta class]
                                     rootClass:[SavedTensorSliceRoot class]
                                          file:SavedTensorSliceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SavedTensorSliceMeta__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SavedSlice

@implementation SavedSlice

@dynamic name;
@dynamic hasSlice, slice;
@dynamic hasData_p, data_p;

typedef struct SavedSlice__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  TensorSliceProto *slice;
  TensorProto *data_p;
} SavedSlice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = SavedSlice_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SavedSlice__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slice",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorSliceProto),
        .number = SavedSlice_FieldNumber_Slice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SavedSlice__storage_, slice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(TensorProto),
        .number = SavedSlice_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SavedSlice__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SavedSlice class]
                                     rootClass:[SavedTensorSliceRoot class]
                                          file:SavedTensorSliceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SavedSlice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SavedTensorSlices

@implementation SavedTensorSlices

@dynamic hasMeta, meta;
@dynamic hasData_p, data_p;

typedef struct SavedTensorSlices__storage_ {
  uint32_t _has_storage_[1];
  SavedTensorSliceMeta *meta;
  SavedSlice *data_p;
} SavedTensorSlices__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "meta",
        .dataTypeSpecific.className = GPBStringifySymbol(SavedTensorSliceMeta),
        .number = SavedTensorSlices_FieldNumber_Meta,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SavedTensorSlices__storage_, meta),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = GPBStringifySymbol(SavedSlice),
        .number = SavedTensorSlices_FieldNumber_Data_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SavedTensorSlices__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SavedTensorSlices class]
                                     rootClass:[SavedTensorSliceRoot class]
                                          file:SavedTensorSliceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SavedTensorSlices__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
